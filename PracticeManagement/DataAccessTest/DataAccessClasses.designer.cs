#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PracticeManagement")]
	public partial class DataAccessClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPerson(TestEntities.Person instance);
    partial void UpdatePerson(TestEntities.Person instance);
    partial void DeletePerson(TestEntities.Person instance);
    partial void InsertClient(TestEntities.Client instance);
    partial void UpdateClient(TestEntities.Client instance);
    partial void DeleteClient(TestEntities.Client instance);
    #endregion
		
		public DataAccessClassesDataContext() : 
				base(global::DataAccessTest.Properties.Settings.Default.connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestEntities.Person> Persons
		{
			get
			{
				return this.GetTable<TestEntities.Person>();
			}
		}
		
		public System.Data.Linq.Table<TestEntities.Client> Clients
		{
			get
			{
				return this.GetTable<TestEntities.Client>();
			}
		}
	}
}
namespace TestEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonId;
		
		private string _Name;
		
		private int _PTODaysPerAnnum;
		
		private System.DateTime _HireDate;
		
		private System.Nullable<System.DateTime> _TerminationDate;
		
		private string _Alias;
		
		private string _LastName;
		
		private int _PersonStatusId;
		
		private string _EmployeeNumber;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnPTODaysPerAnnumChanging(int value);
    partial void OnPTODaysPerAnnumChanged();
    partial void OnHireDateChanging(System.DateTime value);
    partial void OnHireDateChanged();
    partial void OnTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTerminationDateChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPersonStatusIdChanging(int value);
    partial void OnPersonStatusIdChanged();
    partial void OnEmployeeNumberChanging(string value);
    partial void OnEmployeeNumberChanged();
    #endregion
		
		public Person()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTODaysPerAnnum", DbType="Int NOT NULL")]
		public int PTODaysPerAnnum
		{
			get
			{
				return this._PTODaysPerAnnum;
			}
			set
			{
				if ((this._PTODaysPerAnnum != value))
				{
					this.OnPTODaysPerAnnumChanging(value);
					this.SendPropertyChanging();
					this._PTODaysPerAnnum = value;
					this.SendPropertyChanged("PTODaysPerAnnum");
					this.OnPTODaysPerAnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="DateTime NOT NULL")]
		public System.DateTime HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TerminationDate
		{
			get
			{
				return this._TerminationDate;
			}
			set
			{
				if ((this._TerminationDate != value))
				{
					this.OnTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._TerminationDate = value;
					this.SendPropertyChanged("TerminationDate");
					this.OnTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alias", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVARCHAR(40) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonStatusId")]
		public int PersonStatusId
		{
			get
			{
				return this._PersonStatusId;
			}
			set
			{
				if ((this._PersonStatusId != value))
				{
					this.OnPersonStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusId = value;
					this.SendPropertyChanged("PersonStatusId");
					this.OnPersonStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeNumber", CanBeNull=false)]
		public string EmployeeNumber
		{
			get
			{
				return this._EmployeeNumber;
			}
			set
			{
				if ((this._EmployeeNumber != value))
				{
					this.OnEmployeeNumberChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNumber = value;
					this.SendPropertyChanged("EmployeeNumber");
					this.OnEmployeeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Client", Storage="_Clients", ThisKey="PersonId", OtherKey="DefaultSalespersonID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private decimal _DefaultDiscount;
		
		private int _DefaultTerms;
		
		private int _DefaultSalespersonID;
		
		private string _Name;
		
		private bool _Inactive;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnDefaultDiscountChanging(decimal value);
    partial void OnDefaultDiscountChanged();
    partial void OnDefaultTermsChanging(int value);
    partial void OnDefaultTermsChanged();
    partial void OnDefaultSalespersonIDChanging(int value);
    partial void OnDefaultSalespersonIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    #endregion
		
		public Client()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultDiscount", DbType="Decimal(18,2) NOT NULL")]
		public decimal DefaultDiscount
		{
			get
			{
				return this._DefaultDiscount;
			}
			set
			{
				if ((this._DefaultDiscount != value))
				{
					this.OnDefaultDiscountChanging(value);
					this.SendPropertyChanging();
					this._DefaultDiscount = value;
					this.SendPropertyChanged("DefaultDiscount");
					this.OnDefaultDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultTerms", DbType="Int NOT NULL")]
		public int DefaultTerms
		{
			get
			{
				return this._DefaultTerms;
			}
			set
			{
				if ((this._DefaultTerms != value))
				{
					this.OnDefaultTermsChanging(value);
					this.SendPropertyChanging();
					this._DefaultTerms = value;
					this.SendPropertyChanged("DefaultTerms");
					this.OnDefaultTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultSalespersonID", DbType="Int NOT NULL")]
		public int DefaultSalespersonID
		{
			get
			{
				return this._DefaultSalespersonID;
			}
			set
			{
				if ((this._DefaultSalespersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultSalespersonIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultSalespersonID = value;
					this.SendPropertyChanged("DefaultSalespersonID");
					this.OnDefaultSalespersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Client", Storage="_Person", ThisKey="DefaultSalespersonID", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._DefaultSalespersonID = value.PersonId;
					}
					else
					{
						this._DefaultSalespersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

