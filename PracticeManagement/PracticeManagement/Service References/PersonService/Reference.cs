//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.PersonService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonService.IPersonService")]
    public interface IPersonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveReportFilterValues", ReplyAction="http://tempuri.org/IPersonService/SaveReportFilterValuesResponse")]
        void SaveReportFilterValues(int currentUserId, int reportId, string data, int previousUserId, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetReportFilterValues", ReplyAction="http://tempuri.org/IPersonService/GetReportFilterValuesResponse")]
        string GetReportFilterValues(int currentUserId, int reportId, int previousUserId, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeleteReportFilterValues", ReplyAction="http://tempuri.org/IPersonService/DeleteReportFilterValuesResponse")]
        void DeleteReportFilterValues(int currentUserId, int previousUserId, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantPTOEntries", ReplyAction="http://tempuri.org/IPersonService/GetConsultantPTOEntriesResponse")]
        DataTransferObjects.Reports.ConsultantPTOHours[] GetConsultantPTOEntries(System.DateTime startDate, System.DateTime endDate, int step, bool includeActivePersons, bool includeContingentPersons, bool isW2Salary, bool isW2Hourly, string practiceIds, string divisionIds, string titleIds, int sortId, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListWithRole", ReplyAction="http://tempuri.org/IPersonService/GetPersonListWithRoleResponse")]
        DataTransferObjects.Person[] GetPersonListWithRole(string rolename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonEmploymentHistoryById", ReplyAction="http://tempuri.org/IPersonService/GetPersonEmploymentHistoryByIdResponse")]
        DataTransferObjects.Employment[] GetPersonEmploymentHistoryById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonAdministrativeTimeTypesInRange", ReplyAction="http://tempuri.org/IPersonService/GetPersonAdministrativeTimeTypesInRangeResponse" +
            "")]
        DataTransferObjects.TimeEntry.TimeTypeRecord[] GetPersonAdministrativeTimeTypesInRange(int personId, System.DateTime startDate, System.DateTime endDate, bool includePTO, bool includeHoliday, bool includeUnpaid, bool includeSickLeave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonTimeOffExistsInSelectedRangeForOthertha" +
            "nGivenTimescale", ReplyAction="http://tempuri.org/IPersonService/IsPersonTimeOffExistsInSelectedRangeForOthertha" +
            "nGivenTimescaleResponse")]
        bool IsPersonTimeOffExistsInSelectedRangeForOtherthanGivenTimescale(int personId, System.DateTime startDate, System.DateTime endDate, int timeScaleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeletePersonEncodedPassword", ReplyAction="http://tempuri.org/IPersonService/DeletePersonEncodedPasswordResponse")]
        void DeletePersonEncodedPassword(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonPasswordValid", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonPasswordValidResponse")]
        bool CheckIfPersonPasswordValid(string alias, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/UpdateUserPassword", ReplyAction="http://tempuri.org/IPersonService/UpdateUserPasswordResponse")]
        void UpdateUserPassword(int personId, string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetCurrentByPerson", ReplyAction="http://tempuri.org/IPersonService/GetCurrentByPersonResponse")]
        DataTransferObjects.Pay GetCurrentByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SendAdministratorAddedEmail", ReplyAction="http://tempuri.org/IPersonService/SendAdministratorAddedEmailResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SendAdministratorAddedEmail(DataTransferObjects.Person person, DataTransferObjects.Person oldPerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetActivePersonsByProjectId", ReplyAction="http://tempuri.org/IPersonService/GetActivePersonsByProjectIdResponse")]
        DataTransferObjects.Person[] GetActivePersonsByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonTitleByRange", ReplyAction="http://tempuri.org/IPersonService/GetPersonTitleByRangeResponse")]
        DataTransferObjects.Title GetPersonTitleByRange(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfRangeWithinHireAndTermination", ReplyAction="http://tempuri.org/IPersonService/CheckIfRangeWithinHireAndTerminationResponse")]
        bool CheckIfRangeWithinHireAndTermination(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonConsultantTypeInAPeriod", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonConsultantTypeInAPeriodResponse")]
        bool CheckIfPersonConsultantTypeInAPeriod(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetCommissionsValidationByPersonId", ReplyAction="http://tempuri.org/IPersonService/GetCommissionsValidationByPersonIdResponse")]
        DataTransferObjects.Project[] GetCommissionsValidationByPersonId(int personId, System.DateTime hireDate, System.Nullable<System.DateTime> terminationDate, int personStatusId, int divisionId, bool IsReHire);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfValidDivision", ReplyAction="http://tempuri.org/IPersonService/CheckIfValidDivisionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person CheckIfValidDivision(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonEntriesOverlapps", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonEntriesOverlappsResponse")]
        bool CheckIfPersonEntriesOverlapps(int milestoneId, int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonsByPayTypesAndByStatusIds", ReplyAction="http://tempuri.org/IPersonService/GetPersonsByPayTypesAndByStatusIdsResponse")]
        DataTransferObjects.Person[] GetPersonsByPayTypesAndByStatusIds(string statusIds, string payTypeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetAllCohortAssignments", ReplyAction="http://tempuri.org/IPersonService/GetAllCohortAssignmentsResponse")]
        DataTransferObjects.CohortAssignment[] GetAllCohortAssignments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPTOReport", ReplyAction="http://tempuri.org/IPersonService/GetPTOReportResponse")]
        DataTransferObjects.Person[] GetPTOReport(System.DateTime startDate, System.DateTime endDate, bool includeCompanyHolidays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetBadgeDetailsByPersonId", ReplyAction="http://tempuri.org/IPersonService/GetBadgeDetailsByPersonIdResponse")]
        DataTransferObjects.MSBadge[] GetBadgeDetailsByPersonId(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetLogic2020BadgeHistory", ReplyAction="http://tempuri.org/IPersonService/GetLogic2020BadgeHistoryResponse")]
        DataTransferObjects.MSBadge[] GetLogic2020BadgeHistory(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveBadgeDetailsByPersonId", ReplyAction="http://tempuri.org/IPersonService/SaveBadgeDetailsByPersonIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SaveBadgeDetailsByPersonId(DataTransferObjects.MSBadge msBadge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/UpdateMSBadgeDetailsByPersonId", ReplyAction="http://tempuri.org/IPersonService/UpdateMSBadgeDetailsByPersonIdResponse")]
        void UpdateMSBadgeDetailsByPersonId(int personId, int updatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfDatesInDeactivationHistory", ReplyAction="http://tempuri.org/IPersonService/CheckIfDatesInDeactivationHistoryResponse")]
        bool[] CheckIfDatesInDeactivationHistory(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonInProjectForDates", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonInProjectForDatesResponse")]
        bool CheckIfPersonInProjectForDates(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonIsRestrictedByProjectId", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonIsRestrictedByProjectIdResponse")]
        bool CheckIfPersonIsRestrictedByProjectId(int personId, int projectId, System.DateTime chargeDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetBadgeHistoryByPersonId", ReplyAction="http://tempuri.org/IPersonService/GetBadgeHistoryByPersonIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.PersonBadgeHistories GetBadgeHistoryByPersonId(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonInProjectsForThisPeriod", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonInProjectsForThisPeriodResponse")]
        bool CheckIfPersonInProjectsForThisPeriod(System.Nullable<System.DateTime> modifiedEndDate, System.Nullable<System.DateTime> oldEndDate, System.Nullable<System.DateTime> modifiedStartDate, System.Nullable<System.DateTime> oldStartDate, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetBadgeRecordsAfterDeactivatedDate", ReplyAction="http://tempuri.org/IPersonService/GetBadgeRecordsAfterDeactivatedDateResponse")]
        DataTransferObjects.MSBadge[] GetBadgeRecordsAfterDeactivatedDate(int personId, System.DateTime deactivatedDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetBadgeRecordsByProjectId", ReplyAction="http://tempuri.org/IPersonService/GetBadgeRecordsByProjectIdResponse")]
        DataTransferObjects.MSBadge[] GetBadgeRecordsByProjectId(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonSalaryTypeInGivenRange", ReplyAction="http://tempuri.org/IPersonService/IsPersonSalaryTypeInGivenRangeResponse")]
        bool IsPersonSalaryTypeInGivenRange(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPracticeLeaderships", ReplyAction="http://tempuri.org/IPersonService/GetPracticeLeadershipsResponse")]
        DataTransferObjects.Person[] GetPracticeLeaderships(System.Nullable<int> divisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDivisions", ReplyAction="http://tempuri.org/IPersonService/GetPersonDivisionsResponse")]
        DataTransferObjects.PersonDivision[] GetPersonDivisions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDivisionById", ReplyAction="http://tempuri.org/IPersonService/GetPersonDivisionByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.PersonDivision GetPersonDivisionById(int divisioId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/UpdatePersonDivision", ReplyAction="http://tempuri.org/IPersonService/UpdatePersonDivisionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void UpdatePersonDivision(DataTransferObjects.PersonDivision division);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonIsOwnerForDivisionAndOrPractice", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonIsOwnerForDivisionAndOrPracticeRes" +
            "ponse")]
        DataTransferObjects.Owner[] CheckIfPersonIsOwnerForDivisionAndOrPractice(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByPersonIdsAndPayTypeIds", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByPersonIdsAndPayTypeIdsResponse")]
        DataTransferObjects.Person[] GetPersonListByPersonIdsAndPayTypeIds(string personIds, string paytypeIds, string practiceIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveUserTemporaryCredentials", ReplyAction="http://tempuri.org/IPersonService/SaveUserTemporaryCredentialsResponse")]
        bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValid", ReplyAction="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValidResponse")]
        bool CheckIfTemporaryCredentialsValid(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetNewPasswordForUser", ReplyAction="http://tempuri.org/IPersonService/SetNewPasswordForUserResponse")]
        void SetNewPasswordForUser(string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriod", ReplyAction="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriodResponse")]
        DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterTerminationDateRespo" +
            "nse")]
        bool CheckPersonTimeEntriesAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterHireDate", ReplyAction="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterHireDateResponse")]
        bool CheckPersonTimeEntriesAfterHireDate(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfPersonStatusCanChangeFromActiveToConting" +
            "ent", ReplyAction="http://tempuri.org/IPersonService/CheckIfPersonStatusCanChangeFromActiveToConting" +
            "entResponse")]
        DataTransferObjects.Owner CheckIfPersonStatusCanChangeFromActiveToContingent(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonMilestonesAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/GetPersonMilestonesAfterTerminationDateResponse" +
            "")]
        DataTransferObjects.Milestone[] GetPersonMilestonesAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPasswordHistoryByUserName", ReplyAction="http://tempuri.org/IPersonService/GetPasswordHistoryByUserNameResponse")]
        DataTransferObjects.UserPasswordsHistory[] GetPasswordHistoryByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetEncodedPassword", ReplyAction="http://tempuri.org/IPersonService/GetEncodedPasswordResponse")]
        string GetEncodedPassword(string password, string passwordSalt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/RestartCustomMembershipProvider", ReplyAction="http://tempuri.org/IPersonService/RestartCustomMembershipProviderResponse")]
        void RestartCustomMembershipProvider();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SendLockedOutNotificationEmail", ReplyAction="http://tempuri.org/IPersonService/SendLockedOutNotificationEmailResponse")]
        void SendLockedOutNotificationEmail(string userName, string loginPageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetIsNoteRequiredDetailsForSelectedDateRange", ReplyAction="http://tempuri.org/IPersonService/GetIsNoteRequiredDetailsForSelectedDateRangeRes" +
            "ponse")]
        System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsNoteRequiredDetailsForSelectedDateRange(System.DateTime start, System.DateTime end, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetOwnerProjectsAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/GetOwnerProjectsAfterTerminationDateResponse")]
        DataTransferObjects.Project[] GetOwnerProjectsAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetActiveOpportunitiesByOwnerId", ReplyAction="http://tempuri.org/IPersonService/GetActiveOpportunitiesByOwnerIdResponse")]
        DataTransferObjects.Opportunity[] GetActiveOpportunitiesByOwnerId(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveStrawman", ReplyAction="http://tempuri.org/IPersonService/SaveStrawmanResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        System.Nullable<int> SaveStrawman(DataTransferObjects.Person person, DataTransferObjects.Pay currentPay, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeleteStrawman", ReplyAction="http://tempuri.org/IPersonService/DeleteStrawmanResponse")]
        void DeleteStrawman(int personId, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanDetailsById", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetStrawmanDetailsById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmenListAll", ReplyAction="http://tempuri.org/IPersonService/GetStrawmenListAllResponse")]
        DataTransferObjects.Person[] GetStrawmenListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmenListAllShort", ReplyAction="http://tempuri.org/IPersonService/GetStrawmenListAllShortResponse")]
        DataTransferObjects.Person[] GetStrawmenListAllShort(bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveStrawManFromExisting", ReplyAction="http://tempuri.org/IPersonService/SaveStrawManFromExistingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        int SaveStrawManFromExisting(int existingPersonId, DataTransferObjects.Person person, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantswithDemand", ReplyAction="http://tempuri.org/IPersonService/GetConsultantswithDemandResponse")]
        DataTransferObjects.ConsultantDemandItem[] GetConsultantswithDemand(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonHaveActiveStatusDuringThisPeriod", ReplyAction="http://tempuri.org/IPersonService/IsPersonHaveActiveStatusDuringThisPeriodRespons" +
            "e")]
        bool IsPersonHaveActiveStatusDuringThisPeriod(int personId, System.DateTime startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonsListHavingActiveStatusDuringThisPeriod", ReplyAction="http://tempuri.org/IPersonService/PersonsListHavingActiveStatusDuringThisPeriodRe" +
            "sponse")]
        DataTransferObjects.Person[] PersonsListHavingActiveStatusDuringThisPeriod(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetApprovedByManagerList", ReplyAction="http://tempuri.org/IPersonService/GetApprovedByManagerListResponse")]
        DataTransferObjects.Person[] GetApprovedByManagerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListBySearchKeyword", ReplyAction="http://tempuri.org/IPersonService/GetPersonListBySearchKeywordResponse")]
        DataTransferObjects.Person[] GetPersonListBySearchKeyword(string looked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPayHistoryShortByPerson", ReplyAction="http://tempuri.org/IPersonService/GetPayHistoryShortByPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPayHistoryShortByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonSalaryTypeListByPeriod", ReplyAction="http://tempuri.org/IPersonService/IsPersonSalaryTypeListByPeriodResponse")]
        DataTransferObjects.Triple<System.DateTime, bool, bool>[] IsPersonSalaryTypeListByPeriod(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDetailsShort", ReplyAction="http://tempuri.org/IPersonService/GetPersonDetailsShortResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonDetailsShort(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdWithCurrentPay", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdWithCurrentPayResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetStrawmanDetailsByIdWithCurrentPay(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetHistoryByPerson", ReplyAction="http://tempuri.org/IPersonService/GetHistoryByPersonResponse")]
        DataTransferObjects.Pay[] GetHistoryByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanListShortFilterWithTodayPay", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanListShortFilterWithTodayPayResponse")]
        DataTransferObjects.Person[] GetStrawmanListShortFilterWithTodayPay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetTerminationReasonsList", ReplyAction="http://tempuri.org/IPersonService/GetTerminationReasonsListResponse")]
        DataTransferObjects.TerminationReason[] GetTerminationReasonsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonHireAndTerminationDate", ReplyAction="http://tempuri.org/IPersonService/GetPersonHireAndTerminationDateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonHireAndTerminationDate(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListAllSeniorityCategories", ReplyAction="http://tempuri.org/IPersonService/ListAllSeniorityCategoriesResponse")]
        DataTransferObjects.SeniorityCategory[] ListAllSeniorityCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancials", ReplyAction="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancialsResponse")]
        System.Data.DataSet GetPersonMilestoneWithFinancials(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetAsDefaultManager", ReplyAction="http://tempuri.org/IPersonService/SetAsDefaultManagerResponse")]
        void SetAsDefaultManager(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantUtilizationWeekly", ReplyAction="http://tempuri.org/IPersonService/GetConsultantUtilizationWeeklyResponse")]
        DataTransferObjects.Reports.ConsultantUtilizationPerson[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPerson", ReplyAction="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPersonResponse")]
        DataTransferObjects.Reports.ConsultantUtilizationPerson[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsCompensationCoversMilestone", ReplyAction="http://tempuri.org/IPersonService/IsCompensationCoversMilestoneResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CurrentPayExists", ReplyAction="http://tempuri.org/IPersonService/CurrentPayExistsResponse")]
        bool CurrentPayExists(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonGetExcelSet", ReplyAction="http://tempuri.org/IPersonService/PersonGetExcelSetResponse")]
        System.Data.DataSet PersonGetExcelSet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonGetExcelSetWithFilters", ReplyAction="http://tempuri.org/IPersonService/PersonGetExcelSetWithFiltersResponse")]
        System.Data.DataSet PersonGetExcelSetWithFilters(string practiceIdsSelected, string divisionIdsSelected, string looked, string recruiterIdsSelected, string timeScaleIdsSelected, bool Active, bool projected, bool terminated, bool terminatedPending);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPermissions", ReplyAction="http://tempuri.org/IPersonService/GetPermissionsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayByCommaSeparatedIdsL" +
            "ist", ReplyAction="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayByCommaSeparatedIdsL" +
            "istResponse")]
        DataTransferObjects.Person[] GetPersonListWithCurrentPayByCommaSeparatedIdsList(string practiceIdsSelected, string divisionIdsSelected, bool active, int pageSize, int pageNo, string looked, string recruiterIdsSelected, string userName, string sortBy, string timeScaleIdsSelected, bool projected, bool terminated, bool terminatedPending, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllShort", ReplyAction="http://tempuri.org/IPersonService/PersonListAllShortResponse")]
        DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, string statusIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/OwnerListAllShort", ReplyAction="http://tempuri.org/IPersonService/OwnerListAllShortResponse")]
        DataTransferObjects.Person[] OwnerListAllShort(string statusIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatusResponse")]
        DataTransferObjects.Person[] PersonListShortByRoleAndStatus(string statusIds, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListShortByTitleAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonListShortByTitleAndStatusResponse")]
        DataTransferObjects.Person[] PersonListShortByTitleAndStatus(string statusIds, string titleNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllForMilestone", ReplyAction="http://tempuri.org/IPersonService/PersonListAllForMilestoneResponse")]
        DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonCountByCommaSeperatedIdsList", ReplyAction="http://tempuri.org/IPersonService/GetPersonCountByCommaSeperatedIdsListResponse")]
        int GetPersonCountByCommaSeperatedIdsList(string practiceIds, string divisionIdsSelected, bool active, string looked, string recruiterIds, string userName, string timeScaleIds, bool projected, bool terminated, bool terminationpending, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonWorkingHoursDetailsWithinThePeriod", ReplyAction="http://tempuri.org/IPersonService/GetPersonWorkingHoursDetailsWithinThePeriodResp" +
            "onse")]
        DataTransferObjects.PersonWorkingHoursDetailsWithinThePeriod GetPersonWorkingHoursDetailsWithinThePeriod(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetRecruiterList", ReplyAction="http://tempuri.org/IPersonService/GetRecruiterListResponse")]
        DataTransferObjects.Person[] GetRecruiterList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetSalespersonList", ReplyAction="http://tempuri.org/IPersonService/GetSalespersonListResponse")]
        DataTransferObjects.Person[] GetSalespersonList(bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListSalesperson", ReplyAction="http://tempuri.org/IPersonService/PersonListSalespersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListProjectOwner", ReplyAction="http://tempuri.org/IPersonService/PersonListProjectOwnerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListProjectOwner(bool includeInactive, DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetOneOffList", ReplyAction="http://tempuri.org/IPersonService/GetOneOffListResponse")]
        DataTransferObjects.Person[] GetOneOffList(System.DateTime today);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDetail", ReplyAction="http://tempuri.org/IPersonService/GetPersonDetailResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonDetail(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonByAlias", ReplyAction="http://tempuri.org/IPersonService/GetPersonByAliasResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonByAlias(string alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePersonDetail", ReplyAction="http://tempuri.org/IPersonService/SavePersonDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DataTransferObjects.DataAccessFault), Action="http://tempuri.org/IPersonService/SavePersonDetailDataAccessFaultFault", Name="DataAccessFault", Namespace="http://schemas.datacontract.org/2004/07/DataTransferObjects")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        int SavePersonDetail(DataTransferObjects.Person person, string currentUser, string loginPageUrl, bool saveCurrentPay, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonValidations", ReplyAction="http://tempuri.org/IPersonService/PersonValidationsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void PersonValidations(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonOverheadByTimescale", ReplyAction="http://tempuri.org/IPersonService/GetPersonOverheadByTimescaleResponse")]
        DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale, System.Nullable<System.DateTime> effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonRate", ReplyAction="http://tempuri.org/IPersonService/GetPersonRateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancialsPerson", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage, System.Nullable<System.DateTime> effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePay", ReplyAction="http://tempuri.org/IPersonService/SavePayResponse")]
        void SavePay(DataTransferObjects.Pay pay, string loginPageUrl, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeletePay", ReplyAction="http://tempuri.org/IPersonService/DeletePayResponse")]
        void DeletePay(int personId, System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListSeniorities", ReplyAction="http://tempuri.org/IPersonService/ListSenioritiesResponse")]
        DataTransferObjects.Seniority[] ListSeniorities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetPermissionsForPerson", ReplyAction="http://tempuri.org/IPersonService/SetPermissionsForPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonById", ReplyAction="http://tempuri.org/IPersonService/GetPersonByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByStatusList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByStatusListResponse")]
        DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByPersonIdList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByPersonIdListResponse")]
        DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonServiceChannel : PraticeManagement.PersonService.IPersonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonServiceClient : System.ServiceModel.ClientBase<PraticeManagement.PersonService.IPersonService>, PraticeManagement.PersonService.IPersonService {
        
        public PersonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SaveReportFilterValues(int currentUserId, int reportId, string data, int previousUserId, string sessionId) {
            base.Channel.SaveReportFilterValues(currentUserId, reportId, data, previousUserId, sessionId);
        }
        
        public string GetReportFilterValues(int currentUserId, int reportId, int previousUserId, string sessionId) {
            return base.Channel.GetReportFilterValues(currentUserId, reportId, previousUserId, sessionId);
        }
        
        public void DeleteReportFilterValues(int currentUserId, int previousUserId, string sessionId) {
            base.Channel.DeleteReportFilterValues(currentUserId, previousUserId, sessionId);
        }
        
        public DataTransferObjects.Reports.ConsultantPTOHours[] GetConsultantPTOEntries(System.DateTime startDate, System.DateTime endDate, int step, bool includeActivePersons, bool includeContingentPersons, bool isW2Salary, bool isW2Hourly, string practiceIds, string divisionIds, string titleIds, int sortId, string sortDirection) {
            return base.Channel.GetConsultantPTOEntries(startDate, endDate, step, includeActivePersons, includeContingentPersons, isW2Salary, isW2Hourly, practiceIds, divisionIds, titleIds, sortId, sortDirection);
        }
        
        public DataTransferObjects.Person[] GetPersonListWithRole(string rolename) {
            return base.Channel.GetPersonListWithRole(rolename);
        }
        
        public DataTransferObjects.Employment[] GetPersonEmploymentHistoryById(int personId) {
            return base.Channel.GetPersonEmploymentHistoryById(personId);
        }
        
        public DataTransferObjects.TimeEntry.TimeTypeRecord[] GetPersonAdministrativeTimeTypesInRange(int personId, System.DateTime startDate, System.DateTime endDate, bool includePTO, bool includeHoliday, bool includeUnpaid, bool includeSickLeave) {
            return base.Channel.GetPersonAdministrativeTimeTypesInRange(personId, startDate, endDate, includePTO, includeHoliday, includeUnpaid, includeSickLeave);
        }
        
        public bool IsPersonTimeOffExistsInSelectedRangeForOtherthanGivenTimescale(int personId, System.DateTime startDate, System.DateTime endDate, int timeScaleId) {
            return base.Channel.IsPersonTimeOffExistsInSelectedRangeForOtherthanGivenTimescale(personId, startDate, endDate, timeScaleId);
        }
        
        public void DeletePersonEncodedPassword(int personId) {
            base.Channel.DeletePersonEncodedPassword(personId);
        }
        
        public bool CheckIfPersonPasswordValid(string alias, string password) {
            return base.Channel.CheckIfPersonPasswordValid(alias, password);
        }
        
        public void UpdateUserPassword(int personId, string userName, string newPassword) {
            base.Channel.UpdateUserPassword(personId, userName, newPassword);
        }
        
        public DataTransferObjects.Pay GetCurrentByPerson(int personId) {
            return base.Channel.GetCurrentByPerson(personId);
        }
        
        public void SendAdministratorAddedEmail(DataTransferObjects.Person person, DataTransferObjects.Person oldPerson) {
            base.Channel.SendAdministratorAddedEmail(person, oldPerson);
        }
        
        public DataTransferObjects.Person[] GetActivePersonsByProjectId(int projectId) {
            return base.Channel.GetActivePersonsByProjectId(projectId);
        }
        
        public DataTransferObjects.Title GetPersonTitleByRange(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonTitleByRange(personId, startDate, endDate);
        }
        
        public bool CheckIfRangeWithinHireAndTermination(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfRangeWithinHireAndTermination(personId, startDate, endDate);
        }
        
        public bool CheckIfPersonConsultantTypeInAPeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfPersonConsultantTypeInAPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Project[] GetCommissionsValidationByPersonId(int personId, System.DateTime hireDate, System.Nullable<System.DateTime> terminationDate, int personStatusId, int divisionId, bool IsReHire) {
            return base.Channel.GetCommissionsValidationByPersonId(personId, hireDate, terminationDate, personStatusId, divisionId, IsReHire);
        }
        
        public DataTransferObjects.Person CheckIfValidDivision(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfValidDivision(personId, startDate, endDate);
        }
        
        public bool CheckIfPersonEntriesOverlapps(int milestoneId, int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfPersonEntriesOverlapps(milestoneId, personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetPersonsByPayTypesAndByStatusIds(string statusIds, string payTypeIds) {
            return base.Channel.GetPersonsByPayTypesAndByStatusIds(statusIds, payTypeIds);
        }
        
        public DataTransferObjects.CohortAssignment[] GetAllCohortAssignments() {
            return base.Channel.GetAllCohortAssignments();
        }
        
        public DataTransferObjects.Person[] GetPTOReport(System.DateTime startDate, System.DateTime endDate, bool includeCompanyHolidays) {
            return base.Channel.GetPTOReport(startDate, endDate, includeCompanyHolidays);
        }
        
        public DataTransferObjects.MSBadge[] GetBadgeDetailsByPersonId(int personId) {
            return base.Channel.GetBadgeDetailsByPersonId(personId);
        }
        
        public DataTransferObjects.MSBadge[] GetLogic2020BadgeHistory(int personId) {
            return base.Channel.GetLogic2020BadgeHistory(personId);
        }
        
        public void SaveBadgeDetailsByPersonId(DataTransferObjects.MSBadge msBadge) {
            base.Channel.SaveBadgeDetailsByPersonId(msBadge);
        }
        
        public void UpdateMSBadgeDetailsByPersonId(int personId, int updatedBy) {
            base.Channel.UpdateMSBadgeDetailsByPersonId(personId, updatedBy);
        }
        
        public bool[] CheckIfDatesInDeactivationHistory(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfDatesInDeactivationHistory(personId, startDate, endDate);
        }
        
        public bool CheckIfPersonInProjectForDates(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.CheckIfPersonInProjectForDates(personId, startDate, endDate);
        }
        
        public bool CheckIfPersonIsRestrictedByProjectId(int personId, int projectId, System.DateTime chargeDate) {
            return base.Channel.CheckIfPersonIsRestrictedByProjectId(personId, projectId, chargeDate);
        }
        
        public DataTransferObjects.PersonBadgeHistories GetBadgeHistoryByPersonId(int personId) {
            return base.Channel.GetBadgeHistoryByPersonId(personId);
        }
        
        public bool CheckIfPersonInProjectsForThisPeriod(System.Nullable<System.DateTime> modifiedEndDate, System.Nullable<System.DateTime> oldEndDate, System.Nullable<System.DateTime> modifiedStartDate, System.Nullable<System.DateTime> oldStartDate, int personId) {
            return base.Channel.CheckIfPersonInProjectsForThisPeriod(modifiedEndDate, oldEndDate, modifiedStartDate, oldStartDate, personId);
        }
        
        public DataTransferObjects.MSBadge[] GetBadgeRecordsAfterDeactivatedDate(int personId, System.DateTime deactivatedDate) {
            return base.Channel.GetBadgeRecordsAfterDeactivatedDate(personId, deactivatedDate);
        }
        
        public DataTransferObjects.MSBadge[] GetBadgeRecordsByProjectId(int projectId) {
            return base.Channel.GetBadgeRecordsByProjectId(projectId);
        }
        
        public bool IsPersonSalaryTypeInGivenRange(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.IsPersonSalaryTypeInGivenRange(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetPracticeLeaderships(System.Nullable<int> divisionId) {
            return base.Channel.GetPracticeLeaderships(divisionId);
        }
        
        public DataTransferObjects.PersonDivision[] GetPersonDivisions() {
            return base.Channel.GetPersonDivisions();
        }
        
        public DataTransferObjects.PersonDivision GetPersonDivisionById(int divisioId) {
            return base.Channel.GetPersonDivisionById(divisioId);
        }
        
        public void UpdatePersonDivision(DataTransferObjects.PersonDivision division) {
            base.Channel.UpdatePersonDivision(division);
        }
        
        public DataTransferObjects.Owner[] CheckIfPersonIsOwnerForDivisionAndOrPractice(int personId) {
            return base.Channel.CheckIfPersonIsOwnerForDivisionAndOrPractice(personId);
        }
        
        public DataTransferObjects.Person[] GetPersonListByPersonIdsAndPayTypeIds(string personIds, string paytypeIds, string practiceIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonListByPersonIdsAndPayTypeIds(personIds, paytypeIds, practiceIds, startDate, endDate);
        }
        
        public bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl) {
            return base.Channel.SaveUserTemporaryCredentials(userName, PMLoginPageUrl, PMChangePasswordPageUrl);
        }
        
        public bool CheckIfTemporaryCredentialsValid(string userName, string password) {
            return base.Channel.CheckIfTemporaryCredentialsValid(userName, password);
        }
        
        public void SetNewPasswordForUser(string userName, string newPassword) {
            base.Channel.SetNewPasswordForUser(userName, newPassword);
        }
        
        public DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListByCategoryTypeAndPeriod(categoryType, startDate, endDate);
        }
        
        public bool CheckPersonTimeEntriesAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.CheckPersonTimeEntriesAfterTerminationDate(personId, terminationDate);
        }
        
        public bool CheckPersonTimeEntriesAfterHireDate(int personId) {
            return base.Channel.CheckPersonTimeEntriesAfterHireDate(personId);
        }
        
        public DataTransferObjects.Owner CheckIfPersonStatusCanChangeFromActiveToContingent(int personId) {
            return base.Channel.CheckIfPersonStatusCanChangeFromActiveToContingent(personId);
        }
        
        public DataTransferObjects.Milestone[] GetPersonMilestonesAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.GetPersonMilestonesAfterTerminationDate(personId, terminationDate);
        }
        
        public DataTransferObjects.UserPasswordsHistory[] GetPasswordHistoryByUserName(string userName) {
            return base.Channel.GetPasswordHistoryByUserName(userName);
        }
        
        public string GetEncodedPassword(string password, string passwordSalt) {
            return base.Channel.GetEncodedPassword(password, passwordSalt);
        }
        
        public void RestartCustomMembershipProvider() {
            base.Channel.RestartCustomMembershipProvider();
        }
        
        public void SendLockedOutNotificationEmail(string userName, string loginPageUrl) {
            base.Channel.SendLockedOutNotificationEmail(userName, loginPageUrl);
        }
        
        public System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsNoteRequiredDetailsForSelectedDateRange(System.DateTime start, System.DateTime end, int personId) {
            return base.Channel.GetIsNoteRequiredDetailsForSelectedDateRange(start, end, personId);
        }
        
        public DataTransferObjects.Project[] GetOwnerProjectsAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.GetOwnerProjectsAfterTerminationDate(personId, terminationDate);
        }
        
        public DataTransferObjects.Opportunity[] GetActiveOpportunitiesByOwnerId(int personId) {
            return base.Channel.GetActiveOpportunitiesByOwnerId(personId);
        }
        
        public System.Nullable<int> SaveStrawman(DataTransferObjects.Person person, DataTransferObjects.Pay currentPay, string userLogin) {
            return base.Channel.SaveStrawman(person, currentPay, userLogin);
        }
        
        public void DeleteStrawman(int personId, string userLogin) {
            base.Channel.DeleteStrawman(personId, userLogin);
        }
        
        public DataTransferObjects.Person GetStrawmanDetailsById(int personId) {
            return base.Channel.GetStrawmanDetailsById(personId);
        }
        
        public DataTransferObjects.Person[] GetStrawmenListAll() {
            return base.Channel.GetStrawmenListAll();
        }
        
        public DataTransferObjects.Person[] GetStrawmenListAllShort(bool includeInactive) {
            return base.Channel.GetStrawmenListAllShort(includeInactive);
        }
        
        public int SaveStrawManFromExisting(int existingPersonId, DataTransferObjects.Person person, string userLogin) {
            return base.Channel.SaveStrawManFromExisting(existingPersonId, person, userLogin);
        }
        
        public DataTransferObjects.ConsultantDemandItem[] GetConsultantswithDemand(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetConsultantswithDemand(startDate, endDate);
        }
        
        public bool IsPersonHaveActiveStatusDuringThisPeriod(int personId, System.DateTime startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.IsPersonHaveActiveStatusDuringThisPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] PersonsListHavingActiveStatusDuringThisPeriod(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonsListHavingActiveStatusDuringThisPeriod(startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetApprovedByManagerList() {
            return base.Channel.GetApprovedByManagerList();
        }
        
        public DataTransferObjects.Person[] GetPersonListBySearchKeyword(string looked) {
            return base.Channel.GetPersonListBySearchKeyword(looked);
        }
        
        public DataTransferObjects.Person GetPayHistoryShortByPerson(int personId) {
            return base.Channel.GetPayHistoryShortByPerson(personId);
        }
        
        public DataTransferObjects.Triple<System.DateTime, bool, bool>[] IsPersonSalaryTypeListByPeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.IsPersonSalaryTypeListByPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person GetPersonDetailsShort(int personId) {
            return base.Channel.GetPersonDetailsShort(personId);
        }
        
        public DataTransferObjects.Person GetStrawmanDetailsByIdWithCurrentPay(int id) {
            return base.Channel.GetStrawmanDetailsByIdWithCurrentPay(id);
        }
        
        public DataTransferObjects.Pay[] GetHistoryByPerson(int personId) {
            return base.Channel.GetHistoryByPerson(personId);
        }
        
        public DataTransferObjects.Person[] GetStrawmanListShortFilterWithTodayPay() {
            return base.Channel.GetStrawmanListShortFilterWithTodayPay();
        }
        
        public DataTransferObjects.TerminationReason[] GetTerminationReasonsList() {
            return base.Channel.GetTerminationReasonsList();
        }
        
        public DataTransferObjects.Person GetPersonHireAndTerminationDate(int personId) {
            return base.Channel.GetPersonHireAndTerminationDate(personId);
        }
        
        public DataTransferObjects.SeniorityCategory[] ListAllSeniorityCategories() {
            return base.Channel.ListAllSeniorityCategories();
        }
        
        public System.Data.DataSet GetPersonMilestoneWithFinancials(int personId) {
            return base.Channel.GetPersonMilestoneWithFinancials(personId);
        }
        
        public void SetAsDefaultManager(int personId) {
            base.Channel.SetAsDefaultManager(personId);
        }
        
        public DataTransferObjects.Reports.ConsultantUtilizationPerson[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.GetConsultantUtilizationWeekly(context);
        }
        
        public DataTransferObjects.Reports.ConsultantUtilizationPerson[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.ConsultantUtilizationDailyByPerson(personId, context);
        }
        
        public bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end) {
            return base.Channel.IsCompensationCoversMilestone(person, start, end);
        }
        
        public bool CurrentPayExists(int personId) {
            return base.Channel.CurrentPayExists(personId);
        }
        
        public System.Data.DataSet PersonGetExcelSet() {
            return base.Channel.PersonGetExcelSet();
        }
        
        public System.Data.DataSet PersonGetExcelSetWithFilters(string practiceIdsSelected, string divisionIdsSelected, string looked, string recruiterIdsSelected, string timeScaleIdsSelected, bool Active, bool projected, bool terminated, bool terminatedPending) {
            return base.Channel.PersonGetExcelSetWithFilters(practiceIdsSelected, divisionIdsSelected, looked, recruiterIdsSelected, timeScaleIdsSelected, Active, projected, terminated, terminatedPending);
        }
        
        public DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person) {
            return base.Channel.GetPermissions(person);
        }
        
        public DataTransferObjects.Person[] GetPersonListWithCurrentPayByCommaSeparatedIdsList(string practiceIdsSelected, string divisionIdsSelected, bool active, int pageSize, int pageNo, string looked, string recruiterIdsSelected, string userName, string sortBy, string timeScaleIdsSelected, bool projected, bool terminated, bool terminatedPending, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonListWithCurrentPayByCommaSeparatedIdsList(practiceIdsSelected, divisionIdsSelected, active, pageSize, pageNo, looked, recruiterIdsSelected, userName, sortBy, timeScaleIdsSelected, projected, terminated, terminatedPending, alphabet);
        }
        
        public DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, string statusIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllShort(practice, statusIds, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] OwnerListAllShort(string statusIds) {
            return base.Channel.OwnerListAllShort(statusIds);
        }
        
        public DataTransferObjects.Person[] PersonListShortByRoleAndStatus(string statusIds, string roleName) {
            return base.Channel.PersonListShortByRoleAndStatus(statusIds, roleName);
        }
        
        public DataTransferObjects.Person[] PersonListShortByTitleAndStatus(string statusIds, string titleNames) {
            return base.Channel.PersonListShortByTitleAndStatus(statusIds, titleNames);
        }
        
        public DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllForMilestone(milestonePersonId, startDate, endDate);
        }
        
        public int GetPersonCountByCommaSeperatedIdsList(string practiceIds, string divisionIdsSelected, bool active, string looked, string recruiterIds, string userName, string timeScaleIds, bool projected, bool terminated, bool terminationpending, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonCountByCommaSeperatedIdsList(practiceIds, divisionIdsSelected, active, looked, recruiterIds, userName, timeScaleIds, projected, terminated, terminationpending, alphabet);
        }
        
        public DataTransferObjects.PersonWorkingHoursDetailsWithinThePeriod GetPersonWorkingHoursDetailsWithinThePeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonWorkingHoursDetailsWithinThePeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetRecruiterList() {
            return base.Channel.GetRecruiterList();
        }
        
        public DataTransferObjects.Person[] GetSalespersonList(bool includeInactive) {
            return base.Channel.GetSalespersonList(includeInactive);
        }
        
        public DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives) {
            return base.Channel.PersonListSalesperson(person, inactives);
        }
        
        public DataTransferObjects.Person[] PersonListProjectOwner(bool includeInactive, DataTransferObjects.Person person) {
            return base.Channel.PersonListProjectOwner(includeInactive, person);
        }
        
        public DataTransferObjects.Person[] GetOneOffList(System.DateTime today) {
            return base.Channel.GetOneOffList(today);
        }
        
        public DataTransferObjects.Person GetPersonDetail(int personId) {
            return base.Channel.GetPersonDetail(personId);
        }
        
        public DataTransferObjects.Person GetPersonByAlias(string alias) {
            return base.Channel.GetPersonByAlias(alias);
        }
        
        public int SavePersonDetail(DataTransferObjects.Person person, string currentUser, string loginPageUrl, bool saveCurrentPay, string userLogin) {
            return base.Channel.SavePersonDetail(person, currentUser, loginPageUrl, saveCurrentPay, userLogin);
        }
        
        public void PersonValidations(DataTransferObjects.Person person) {
            base.Channel.PersonValidations(person);
        }
        
        public DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale, System.Nullable<System.DateTime> effectiveDate) {
            return base.Channel.GetPersonOverheadByTimescale(timescale, effectiveDate);
        }
        
        public DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson) {
            return base.Channel.GetPersonRate(milestonePerson);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage, System.Nullable<System.DateTime> effectiveDate) {
            return base.Channel.CalculateProposedFinancialsPerson(person, proposedRate, proposedHoursPerWeek, clientDiscount, isMarginTestPage, effectiveDate);
        }
        
        public void SavePay(DataTransferObjects.Pay pay, string loginPageUrl, string user) {
            base.Channel.SavePay(pay, loginPageUrl, user);
        }
        
        public void DeletePay(int personId, System.DateTime startDate) {
            base.Channel.DeletePay(personId, startDate);
        }
        
        public DataTransferObjects.Seniority[] ListSeniorities() {
            return base.Channel.ListSeniorities();
        }
        
        public void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions) {
            base.Channel.SetPermissionsForPerson(person, permissions);
        }
        
        public DataTransferObjects.Person GetPersonById(int personId) {
            return base.Channel.GetPersonById(personId);
        }
        
        public DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId) {
            return base.Channel.GetPersonListByStatusList(statusList, personId);
        }
        
        public DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds) {
            return base.Channel.GetPersonListByPersonIdList(PersonIds);
        }
    }
}

