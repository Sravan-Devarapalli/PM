//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.RoleService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoleService.IRoleService")]
    public interface IRoleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/AddUsersToRoles", ReplyAction="http://tempuri.org/IRoleService/AddUsersToRolesResponse")]
        void AddUsersToRoles(string[] usernames, string[] roleNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetApplicationName", ReplyAction="http://tempuri.org/IRoleService/GetApplicationNameResponse")]
        string GetApplicationName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/SetApplicationName", ReplyAction="http://tempuri.org/IRoleService/SetApplicationNameResponse")]
        void SetApplicationName(string applicationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/CreateRole", ReplyAction="http://tempuri.org/IRoleService/CreateRoleResponse")]
        void CreateRole(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/DeleteRole", ReplyAction="http://tempuri.org/IRoleService/DeleteRoleResponse")]
        bool DeleteRole(string roleName, bool throwOnPopulatedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/FindUsersInRole", ReplyAction="http://tempuri.org/IRoleService/FindUsersInRoleResponse")]
        string[] FindUsersInRole(string roleName, string usernameToMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetAllRoles", ReplyAction="http://tempuri.org/IRoleService/GetAllRolesResponse")]
        string[] GetAllRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRolesForUser", ReplyAction="http://tempuri.org/IRoleService/GetRolesForUserResponse")]
        string[] GetRolesForUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetUsersInRole", ReplyAction="http://tempuri.org/IRoleService/GetUsersInRoleResponse")]
        string[] GetUsersInRole(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/IsUserInRole", ReplyAction="http://tempuri.org/IRoleService/IsUserInRoleResponse")]
        bool IsUserInRole(string username, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemoveUsersFromRoles", ReplyAction="http://tempuri.org/IRoleService/RemoveUsersFromRolesResponse")]
        void RemoveUsersFromRoles(string[] usernames, string[] roleNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RoleExists", ReplyAction="http://tempuri.org/IRoleService/RoleExistsResponse")]
        bool RoleExists(string roleName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoleServiceChannel : PraticeManagement.RoleService.IRoleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoleServiceClient : System.ServiceModel.ClientBase<PraticeManagement.RoleService.IRoleService>, PraticeManagement.RoleService.IRoleService {
        
            
        public RoleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUsersToRoles(string[] usernames, string[] roleNames) {
            base.Channel.AddUsersToRoles(usernames, roleNames);
        }
        
        public string GetApplicationName() {
            return base.Channel.GetApplicationName();
        }
        
        public void SetApplicationName(string applicationName) {
            base.Channel.SetApplicationName(applicationName);
        }
        
        public void CreateRole(string roleName) {
            base.Channel.CreateRole(roleName);
        }
        
        public bool DeleteRole(string roleName, bool throwOnPopulatedRole) {
            return base.Channel.DeleteRole(roleName, throwOnPopulatedRole);
        }
        
        public string[] FindUsersInRole(string roleName, string usernameToMatch) {
            return base.Channel.FindUsersInRole(roleName, usernameToMatch);
        }
        
        public string[] GetAllRoles() {
            return base.Channel.GetAllRoles();
        }
        
        public string[] GetRolesForUser(string username) {
            return base.Channel.GetRolesForUser(username);
        }
        
        public string[] GetUsersInRole(string roleName) {
            return base.Channel.GetUsersInRole(roleName);
        }
        
        public bool IsUserInRole(string username, string roleName) {
            return base.Channel.IsUserInRole(username, roleName);
        }
        
        public void RemoveUsersFromRoles(string[] usernames, string[] roleNames) {
            base.Channel.RemoveUsersFromRoles(usernames, roleNames);
        }
        
        public bool RoleExists(string roleName) {
            return base.Channel.RoleExists(roleName);
        }
    }
}

