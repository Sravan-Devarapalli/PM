//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.TimeEntryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeEntriesGroupedByPerson", Namespace="http://schemas.datacontract.org/2004/07/DataTransferObjects.CompositeObjects")]
    [System.SerializableAttribute()]
    public partial class TimeEntriesGroupedByPerson : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<DataTransferObjects.Person, DataTransferObjects.TimeEntry.TimeEntryRecord[]> _groupedTimeEtnriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<DataTransferObjects.Person, DataTransferObjects.TimeEntry.TimeEntryRecord[]> _groupedTimeEtnries {
            get {
                return this._groupedTimeEtnriesField;
            }
            set {
                if ((object.ReferenceEquals(this._groupedTimeEtnriesField, value) != true)) {
                    this._groupedTimeEtnriesField = value;
                    this.RaisePropertyChanged("_groupedTimeEtnries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimeEntryService.ITimeEntryService")]
    public interface ITimeEntryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/TimeZonesAll", ReplyAction="http://tempuri.org/ITimeEntryService/TimeZonesAllResponse")]
        DataTransferObjects.Timezone[] TimeZonesAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/SetTimeZone", ReplyAction="http://tempuri.org/ITimeEntryService/SetTimeZoneResponse")]
        void SetTimeZone(DataTransferObjects.Timezone timezone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/HasTimeEntriesForMilestone", ReplyAction="http://tempuri.org/ITimeEntryService/HasTimeEntriesForMilestoneResponse")]
        bool HasTimeEntriesForMilestone(int milestoneId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntriesForPerson", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntriesForPersonResponse")]
        DataTransferObjects.TimeEntry.TimeEntryRecord[] GetTimeEntriesForPerson(DataTransferObjects.Person person, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntriesPerson", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntriesPersonResponse")]
        DataTransferObjects.CompositeObjects.PersonTimeEntries GetTimeEntriesPerson(DataTransferObjects.ContextObjects.TimeEntryPersonReportContext reportContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntriesProject", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntriesProjectResponse")]
        PraticeManagement.TimeEntryService.TimeEntriesGroupedByPerson GetTimeEntriesProject(DataTransferObjects.ContextObjects.TimeEntryProjectReportContext reportContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetCurrentMilestones", ReplyAction="http://tempuri.org/ITimeEntryService/GetCurrentMilestonesResponse")]
        DataTransferObjects.MilestonePersonEntry[] GetCurrentMilestones(DataTransferObjects.Person person, System.DateTime startDate, System.DateTime endDate, int defaultMilestoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetAllTimeEntries", ReplyAction="http://tempuri.org/ITimeEntryService/GetAllTimeEntriesResponse")]
        DataTransferObjects.TimeEntry.TimeEntryRecord[] GetAllTimeEntries(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext, int startRow, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntriesCount", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntriesCountResponse")]
        int GetTimeEntriesCount(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntrySums", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntrySumsResponse")]
        DataTransferObjects.TimeEntry.TimeEntrySums GetTimeEntrySums(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/TimeEntriesByPersonGetExcelSet", ReplyAction="http://tempuri.org/ITimeEntryService/TimeEntriesByPersonGetExcelSetResponse")]
        System.Data.DataSet TimeEntriesByPersonGetExcelSet(DataTransferObjects.ContextObjects.TimeEntryPersonReportContext reportContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/DeleteTimeEntry", ReplyAction="http://tempuri.org/ITimeEntryService/DeleteTimeEntryResponse")]
        void DeleteTimeEntry(int clientId, int projectId, int personId, int timetypeId, System.DateTime startDate, System.DateTime endDate, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/SaveTimeTrack", ReplyAction="http://tempuri.org/ITimeEntryService/SaveTimeTrackResponse")]
        void SaveTimeTrack(string timeEntriesXml, int personId, System.DateTime startDate, System.DateTime endDate, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetIsChargeCodeTurnOffByPeriod", ReplyAction="http://tempuri.org/ITimeEntryService/GetIsChargeCodeTurnOffByPeriodResponse")]
        System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsChargeCodeTurnOffByPeriod(int personId, int clientId, int groupId, int projectId, int timeTypeId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/SetPersonTimeEntryRecursiveSelection", ReplyAction="http://tempuri.org/ITimeEntryService/SetPersonTimeEntryRecursiveSelectionResponse" +
            "")]
        void SetPersonTimeEntryRecursiveSelection(int personId, int clientId, int projectGroupId, int projectId, int timeEntrySectionId, bool isRecursive, System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/SetPersonTimeEntrySelection", ReplyAction="http://tempuri.org/ITimeEntryService/SetPersonTimeEntrySelectionResponse")]
        void SetPersonTimeEntrySelection(int personId, int clientId, int projectGroupId, int projectId, int timeEntrySectionId, bool isDelete, System.DateTime startDate, System.DateTime endDate, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/ToggleIsCorrect", ReplyAction="http://tempuri.org/ITimeEntryService/ToggleIsCorrectResponse")]
        void ToggleIsCorrect(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/ToggleIsReviewed", ReplyAction="http://tempuri.org/ITimeEntryService/ToggleIsReviewedResponse")]
        void ToggleIsReviewed(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/ToggleIsChargeable", ReplyAction="http://tempuri.org/ITimeEntryService/ToggleIsChargeableResponse")]
        void ToggleIsChargeable(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetAllTimeEntryProjects", ReplyAction="http://tempuri.org/ITimeEntryService/GetAllTimeEntryProjectsResponse")]
        DataTransferObjects.Project[] GetAllTimeEntryProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetTimeEntryProjectsByClientId", ReplyAction="http://tempuri.org/ITimeEntryService/GetTimeEntryProjectsByClientIdResponse")]
        DataTransferObjects.Project[] GetTimeEntryProjectsByClientId(System.Nullable<int> clientId, System.Nullable<int> personId, bool showActiveAndInternalProjectsOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetAllTimeEntryMilestones", ReplyAction="http://tempuri.org/ITimeEntryService/GetAllTimeEntryMilestonesResponse")]
        DataTransferObjects.Milestone[] GetAllTimeEntryMilestones();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/GetAllTimeEntryPersons", ReplyAction="http://tempuri.org/ITimeEntryService/GetAllTimeEntryPersonsResponse")]
        DataTransferObjects.Person[] GetAllTimeEntryPersons(System.DateTime entryDateFrom, System.DateTime entryDateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeEntryService/PersonTimeEntriesByPeriod", ReplyAction="http://tempuri.org/ITimeEntryService/PersonTimeEntriesByPeriodResponse")]
        DataTransferObjects.TimeEntry.TimeEntrySection[] PersonTimeEntriesByPeriod(int personId, System.DateTime startDate, System.DateTime endDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimeEntryServiceChannel : PraticeManagement.TimeEntryService.ITimeEntryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeEntryServiceClient : System.ServiceModel.ClientBase<PraticeManagement.TimeEntryService.ITimeEntryService>, PraticeManagement.TimeEntryService.ITimeEntryService {
        
               
        public TimeEntryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimeEntryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeEntryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeEntryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataTransferObjects.Timezone[] TimeZonesAll() {
            return base.Channel.TimeZonesAll();
        }
        
        public void SetTimeZone(DataTransferObjects.Timezone timezone) {
            base.Channel.SetTimeZone(timezone);
        }
        
        public bool HasTimeEntriesForMilestone(int milestoneId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.HasTimeEntriesForMilestone(milestoneId, startDate, endDate);
        }
        
        public DataTransferObjects.TimeEntry.TimeEntryRecord[] GetTimeEntriesForPerson(DataTransferObjects.Person person, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetTimeEntriesForPerson(person, startDate, endDate);
        }
        
        public DataTransferObjects.CompositeObjects.PersonTimeEntries GetTimeEntriesPerson(DataTransferObjects.ContextObjects.TimeEntryPersonReportContext reportContext) {
            return base.Channel.GetTimeEntriesPerson(reportContext);
        }
        
        public PraticeManagement.TimeEntryService.TimeEntriesGroupedByPerson GetTimeEntriesProject(DataTransferObjects.ContextObjects.TimeEntryProjectReportContext reportContext) {
            return base.Channel.GetTimeEntriesProject(reportContext);
        }
        
        public DataTransferObjects.MilestonePersonEntry[] GetCurrentMilestones(DataTransferObjects.Person person, System.DateTime startDate, System.DateTime endDate, int defaultMilestoneId) {
            return base.Channel.GetCurrentMilestones(person, startDate, endDate, defaultMilestoneId);
        }
        
        public DataTransferObjects.TimeEntry.TimeEntryRecord[] GetAllTimeEntries(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext, int startRow, int maxRows) {
            return base.Channel.GetAllTimeEntries(selectContext, startRow, maxRows);
        }
        
        public int GetTimeEntriesCount(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext) {
            return base.Channel.GetTimeEntriesCount(selectContext);
        }
        
        public DataTransferObjects.TimeEntry.TimeEntrySums GetTimeEntrySums(DataTransferObjects.ContextObjects.TimeEntrySelectContext selectContext) {
            return base.Channel.GetTimeEntrySums(selectContext);
        }
        
        public System.Data.DataSet TimeEntriesByPersonGetExcelSet(DataTransferObjects.ContextObjects.TimeEntryPersonReportContext reportContext) {
            return base.Channel.TimeEntriesByPersonGetExcelSet(reportContext);
        }
        
        public void DeleteTimeEntry(int clientId, int projectId, int personId, int timetypeId, System.DateTime startDate, System.DateTime endDate, string userName) {
            base.Channel.DeleteTimeEntry(clientId, projectId, personId, timetypeId, startDate, endDate, userName);
        }
        
        public void SaveTimeTrack(string timeEntriesXml, int personId, System.DateTime startDate, System.DateTime endDate, string userLogin) {
            base.Channel.SaveTimeTrack(timeEntriesXml, personId, startDate, endDate, userLogin);
        }
        
        public System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsChargeCodeTurnOffByPeriod(int personId, int clientId, int groupId, int projectId, int timeTypeId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetIsChargeCodeTurnOffByPeriod(personId, clientId, groupId, projectId, timeTypeId, startDate, endDate);
        }
        
        public void SetPersonTimeEntryRecursiveSelection(int personId, int clientId, int projectGroupId, int projectId, int timeEntrySectionId, bool isRecursive, System.DateTime startDate) {
            base.Channel.SetPersonTimeEntryRecursiveSelection(personId, clientId, projectGroupId, projectId, timeEntrySectionId, isRecursive, startDate);
        }
        
        public void SetPersonTimeEntrySelection(int personId, int clientId, int projectGroupId, int projectId, int timeEntrySectionId, bool isDelete, System.DateTime startDate, System.DateTime endDate, string userName) {
            base.Channel.SetPersonTimeEntrySelection(personId, clientId, projectGroupId, projectId, timeEntrySectionId, isDelete, startDate, endDate, userName);
        }
        
        public void ToggleIsCorrect(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry) {
            base.Channel.ToggleIsCorrect(timeEntry);
        }
        
        public void ToggleIsReviewed(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry) {
            base.Channel.ToggleIsReviewed(timeEntry);
        }
        
        public void ToggleIsChargeable(DataTransferObjects.TimeEntry.TimeEntryRecord timeEntry) {
            base.Channel.ToggleIsChargeable(timeEntry);
        }
        
        public DataTransferObjects.Project[] GetAllTimeEntryProjects() {
            return base.Channel.GetAllTimeEntryProjects();
        }
        
        public DataTransferObjects.Project[] GetTimeEntryProjectsByClientId(System.Nullable<int> clientId, System.Nullable<int> personId, bool showActiveAndInternalProjectsOnly) {
            return base.Channel.GetTimeEntryProjectsByClientId(clientId, personId, showActiveAndInternalProjectsOnly);
        }
        
        public DataTransferObjects.Milestone[] GetAllTimeEntryMilestones() {
            return base.Channel.GetAllTimeEntryMilestones();
        }
        
        public DataTransferObjects.Person[] GetAllTimeEntryPersons(System.DateTime entryDateFrom, System.DateTime entryDateTo) {
            return base.Channel.GetAllTimeEntryPersons(entryDateFrom, entryDateTo);
        }
        
        public DataTransferObjects.TimeEntry.TimeEntrySection[] PersonTimeEntriesByPeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonTimeEntriesByPeriod(personId, startDate, endDate);
        }
    }
}

