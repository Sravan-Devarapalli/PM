CREATE TRIGGER [tr_TEH_LogDelete]
    ON [dbo].[TimeEntryHours]
    FOR DELETE
AS 
BEGIN
    SET NOCOUNT ON

		-- Ensure the temporary table exists
		EXEC SessionLogPrepare @UserLogin = NULL


		DECLARE @CurrentPMTime DATETIME 
		SET @CurrentPMTime = dbo.InsertingTime()

		;WITH NEW_VALUES AS
		(
			SELECT   1 AS Tag,
					NULL AS Parent, 
					i.[TimeEntryId] AS 'TimeEntryId',
					i.Id
					,CONVERT(VARCHAR(10), i.[CreateDate], 101) AS 'CreateDate'
					,CONVERT(VARCHAR(10), i.[ModifiedDate], 101) AS 'ModifiedDate'
					,CAST(i.[ActualHours] as decimal(20,2)) AS 'ActualHours'
					,CAST(TE.[ForecastedHours] as decimal(20,2)) AS 'ForecastedHours'
					,CC.[TimeTypeId] AS 'TimeTypeId'
					,tType.[Name] AS 'TimeTypeName'
					,i.[ModifiedBy] AS 'ModifiedBy'
					,TE.[Note] AS 'Note'
					,TER.Name AS 'ReviewStatus'
					,CASE i.[IsChargeable] WHEN 1 THEN 'Billable'
											ELSE 'Not Billable' END AS 'IsBillable'
					,CONVERT(VARCHAR(10), TE.[ChargeCodeDate], 101) AS 'ChargeCodeDate'
					,modp.LastName + ', ' + modp.FirstName AS 'ModifiedByName'
					,objp.LastName + ', ' + objp.FirstName AS 'ObjectName'
					,objp.PersonId AS 'ObjectPersonId'
					,clnt.[Name] AS 'ClientName'
					,clnt.[ClientId] AS 'ClientId'
					,PG.[Name] AS 'ProjectGroupName'
					,PG.[GroupId] AS 'ProjectGroupId'
					,proj.[Name] AS 'ProjectName'
					,proj.ProjectId AS 'ProjectId'
					,clnt.[Code] + ' - ' + PG.[Code] + ' - ' + proj.ProjectNumber + ' - ' + '01 - ' + tType.Code AS 'ChargeCode'
					,proj.IsAllowedToShow AS 'IsAllowedToShow'
			FROM inserted AS i
			INNER JOIN dbo.TimeEntry AS TE ON TE.TimeEntryId = i.TimeEntryId AND TE.IsAutoGenerated = 0
			INNER JOIN dbo.TimeEntryReviewStatus AS TER ON TER.Id = i.ReviewStatusId
			INNER JOIN dbo.ChargeCode AS CC ON CC.Id = TE.ChargeCodeId
			INNER JOIN dbo.Person AS modp ON modp.PersonId = i.ModifiedBy
			INNER JOIN dbo.Person AS objp ON objp.PersonId = TE.PersonId
			INNER JOIN dbo.Project AS proj ON proj.ProjectId = CC.ProjectId
			INNER JOIN dbo.Client AS clnt ON CC.ClientId = clnt.ClientId
			INNER JOIN dbo.ProjectGroup AS PG ON PG.GroupId = CC.ProjectGroupId
			INNER JOIN dbo.TimeType AS tType ON tType.TimeTypeId = CC.TimeTypeId
		),

		OLD_VALUES AS
		(
			SELECT   1 AS Tag,
					NULL AS Parent, 
					d.[TimeEntryId] AS 'TimeEntryId',
					d.Id
					,CONVERT(VARCHAR(10), d.[CreateDate], 101) AS 'CreateDate'
					,CONVERT(VARCHAR(10), d.[ModifiedDate], 101) AS 'ModifiedDate'
					,CAST(d.[ActualHours] as decimal(20,2)) AS 'ActualHours'
					,CAST(TE.[ForecastedHours] as decimal(20,2)) AS 'ForecastedHours'
					,CC.[TimeTypeId] AS 'TimeTypeId'
					,tType.[Name] AS 'TimeTypeName'
					,d.[ModifiedBy] AS 'ModifiedBy'
					,TE.[Note] AS 'Note'
					,TER.Name AS 'ReviewStatus'
					,CASE d.[IsChargeable] WHEN 1 THEN 'Billable'
											ELSE 'Not Billable' END AS 'IsBillable'
					,CONVERT(VARCHAR(10), TE.[ChargeCodeDate], 101) AS 'ChargeCodeDate'
					,modp.LastName + ', ' + modp.FirstName AS 'ModifiedByName'
					,objp.LastName + ', ' + objp.FirstName AS 'ObjectName'
					,objp.PersonId AS 'ObjectPersonId'
					,clnt.[Name] AS 'ClientName'
					,clnt.[ClientId] AS 'ClientId'
					,PG.[Name] AS 'ProjectGroupName'
					,PG.[GroupId] AS 'ProjectGroupId'
					,proj.[Name] AS 'ProjectName'
					,proj.ProjectId AS 'ProjectId'
					,clnt.[Code] + ' - ' + PG.[Code] + ' - ' + proj.ProjectNumber + ' - ' + '01 - ' + tType.Code AS 'ChargeCode'
					,proj.IsAllowedToShow AS 'IsAllowedToShow'
			FROM deleted AS d
			INNER JOIN dbo.TimeEntry AS TE ON TE.TimeEntryId = d.TimeEntryId AND TE.IsAutoGenerated = 0
			INNER JOIN dbo.TimeEntryReviewStatus AS TER ON TER.Id = d.ReviewStatusId
			INNER JOIN dbo.ChargeCode AS CC ON CC.Id = TE.ChargeCodeId
			INNER JOIN dbo.Person AS modp ON modp.PersonId = d.ModifiedBy
			INNER JOIN dbo.Person AS objp ON objp.PersonId = TE.PersonId
			INNER JOIN dbo.Project AS proj ON proj.ProjectId = CC.ProjectId
			INNER JOIN dbo.Client AS clnt ON CC.ClientId = clnt.ClientId
			INNER JOIN dbo.ProjectGroup AS PG ON PG.GroupId = CC.ProjectGroupId
			INNER JOIN dbo.TimeType AS tType ON tType.TimeTypeId = CC.TimeTypeId
		)

		-- Log an activity
		INSERT INTO dbo.UserActivityLog
					(ActivityTypeID,
					 SessionID,
					 SystemUser,
					 Workstation,
					 ApplicationName,
					 UserLogin,
					 PersonID,
					 LastName,
					 FirstName,
					 Data,
					 LogData,
					 LogDate)
		SELECT 5 AS ActivityTypeID /* insert only */,
			   l.SessionID,
			   l.SystemUser,
			   l.Workstation,
			   l.ApplicationName,
			   l.UserLogin,
			   l.PersonID,
			   l.LastName,
			   l.FirstName,
			   Data =  CONVERT(NVARCHAR(MAX),(SELECT	NEW_VALUES.Tag,
														NEW_VALUES.Parent, 
														NEW_VALUES.TimeEntryId,
														NEW_VALUES.CreateDate,
														NEW_VALUES.ModifiedDate,
														NEW_VALUES.ActualHours,
														NEW_VALUES.ForecastedHours,
														NEW_VALUES.TimeTypeId,
														NEW_VALUES.TimeTypeName,
														NEW_VALUES.ModifiedBy,
														NEW_VALUES.Note,
														NEW_VALUES.ReviewStatus,
														NEW_VALUES.IsBillable,
														NEW_VALUES.ChargeCodeDate,
														NEW_VALUES.ModifiedByName,
														NEW_VALUES.ObjectName,
														NEW_VALUES.ObjectPersonId,
														NEW_VALUES.ClientName,
														NEW_VALUES.ClientId,
														NEW_VALUES.ProjectGroupName,
														NEW_VALUES.ProjectGroupId,
														NEW_VALUES.ProjectName,
														NEW_VALUES.ProjectId,
														NEW_VALUES.ChargeCode,
														NEW_VALUES.IsAllowedToShow,
														OLD_VALUES.Tag,
														OLD_VALUES.Parent, 
														OLD_VALUES.TimeEntryId,
														OLD_VALUES.CreateDate,
														OLD_VALUES.ModifiedDate,
														OLD_VALUES.ActualHours,
														OLD_VALUES.ForecastedHours,
														OLD_VALUES.TimeTypeId,
														OLD_VALUES.TimeTypeName,
														OLD_VALUES.ModifiedBy,
														OLD_VALUES.Note,
														OLD_VALUES.ReviewStatus,
														OLD_VALUES.IsBillable,
														OLD_VALUES.ChargeCodeDate,
														OLD_VALUES.ModifiedByName,
														OLD_VALUES.ObjectName,
														OLD_VALUES.ObjectPersonId,
														OLD_VALUES.ClientName,
														OLD_VALUES.ClientId,
														OLD_VALUES.ProjectGroupName,
														OLD_VALUES.ProjectGroupId,
														OLD_VALUES.ProjectName,
														OLD_VALUES.ProjectId,
														OLD_VALUES.ChargeCode,
														OLD_VALUES.IsAllowedToShow
												FROM NEW_VALUES
												FULL JOIN OLD_VALUES ON NEW_VALUES.Id = OLD_VALUES.Id
												WHERE OLD_VALUES.Id = d.Id
												FOR XML AUTO, ROOT('TimeEntry'))),
						  
				LogData =  (SELECT NEW_VALUES.Tag,
									NEW_VALUES.Parent, 
									NEW_VALUES.TimeEntryId,
									NEW_VALUES.CreateDate,
									NEW_VALUES.ModifiedDate,
									NEW_VALUES.ObjectPersonId AS PersonId,
									NEW_VALUES.TimeTypeId,
									NEW_VALUES.TimeTypeName,
							        NEW_VALUES.Note,
									NEW_VALUES.ChargeCodeDate,
									NEW_VALUES.ObjectName,
									NEW_VALUES.ClientId,
									NEW_VALUES.ProjectGroupId,
									NEW_VALUES.ProjectId,
									OLD_VALUES.Tag,
									OLD_VALUES.Parent, 
									OLD_VALUES.TimeEntryId,
									OLD_VALUES.CreateDate,
									OLD_VALUES.ModifiedDate,
									OLD_VALUES.ObjectPersonId AS PersonId,
									OLD_VALUES.TimeTypeId,
									OLD_VALUES.TimeTypeName,
							        OLD_VALUES.Note,
									OLD_VALUES.ChargeCodeDate,
									OLD_VALUES.ObjectName,
									OLD_VALUES.ClientId,
									OLD_VALUES.ProjectGroupId,
									OLD_VALUES.ProjectId
					         FROM NEW_VALUES
								FULL JOIN OLD_VALUES ON NEW_VALUES.Id = OLD_VALUES.Id
								WHERE OLD_VALUES.Id = d.Id
					  FOR XML AUTO, ROOT('TimeEntry'), TYPE),
				@CurrentPMTime
		  FROM deleted AS d
			   INNER JOIN dbo.TimeEntry AS TE ON TE.TimeEntryId = d.TimeEntryId AND TE.IsAutoGenerated = 0
			   INNER JOIN dbo.SessionLogData AS l ON l.SessionID = @@SPID

			   ;WITH
		OLD_VALUES AS
		(
			SELECT  d.Id
					,d.[TimeEntryId] AS 'TimeEntryId'
					,TE.PersonId AS 'ObjectPersonId'
					,TE.ChargeCodeId AS 'ChargeCodeId'
					,CONVERT(VARCHAR(10), TE.[ChargeCodeDate], 101) AS 'ChargeCodeDate'
					,TE.[Note] AS 'Note'
					,CAST(TE.[ForecastedHours] as decimal(20,2)) AS 'ForecastedHours'
					,TE.IsCorrect
					,TE.IsAutoGenerated
					,CAST(d.[ActualHours] as decimal(20,2)) AS 'ActualHours'
					,CONVERT(VARCHAR(10), d.[CreateDate], 101) AS 'CreateDate'
					,CONVERT(VARCHAR(10), d.[ModifiedDate], 101) AS 'ModifiedDate'
					,d.[ModifiedBy] AS 'ModifiedBy'
					,d.[IsChargeable] AS 'IsChargeable'
					,d.ReviewStatusId AS 'ReviewStatusId'
			FROM deleted AS d
			INNER JOIN dbo.TimeEntry AS TE ON TE.TimeEntryId = d.TimeEntryId
		)

		INSERT INTO dbo.TimeEntryHistory
					(TimeEntryId  ,
					  PersonId  ,
					  ChargeCodeId  ,
					  ChargeCodeDate ,
					  Note  ,
					  ForecastedHours ,
					  IsCorrect ,
					  IsAutoGenerated ,
					  OldHours    ,
					  ActualHours ,
					  CreateDate ,
					  ModifiedDate,
					  ModifiedBy  ,
					  IsChargeable,
					  ReviewStatusId  ,
					  ActivityTypeId  ,
					  SessionID)
		SELECT  OLD_VALUES.TimeEntryId,
				OLD_VALUES.ObjectPersonId,
				OLD_VALUES.ChargeCodeId,
				OLD_VALUES.ChargeCodeDate,
				OLD_VALUES.Note,
				OLD_VALUES.ForecastedHours,
				OLD_VALUES.IsCorrect,
				OLD_VALUES.IsAutoGenerated,
				OLD_VALUES.ActualHours,
				0,
				OLD_VALUES.CreateDate,
				OLD_VALUES.ModifiedDate,
				OLD_VALUES.ModifiedBy,
				OLD_VALUES.IsChargeable,
				OLD_VALUES.ReviewStatusId,
				5,
				l.SessionID
		  FROM OLD_VALUES 
		  INNER JOIN dbo.SessionLogData AS l ON l.SessionID = @@SPID

END
