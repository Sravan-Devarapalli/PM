-- =============================================
-- Author:		ThulasiRam.P
-- Create date: 02-17-2012
-- Description: Delete 	Substitute Day of an company holiday 
-- =============================================
CREATE PROCEDURE [dbo].[DeleteSubstituteDay]
(
	@PersonId   INT,
	@SubstituteDayDate DATETIME ,
	@UserLogin	NVARCHAR(255)
)
AS
BEGIN
/*
1.Get the @ParentHolidayDate,@ParentHolidayDescription for the given @SubstituteDayDate.
2.Get weather the person is w2salary person for the @ParentHolidayDate.
3.Delete 2 records in to person calendar table:
	1.@ParentHolidayDate record.
	2.@SubstituteDayDate record
4.Delete time entry records for the given @SubstituteDayDate.
5.Insert holiday time type Entry to TimeEntry tables for the @ParentHolidayDate.

*/
	SET NOCOUNT ON;
		EXEC dbo.SessionLogPrepare @UserLogin = @UserLogin
	DECLARE @ParentHolidayDate		  DATETIME = NULL,
	        @ParentHolidayDescription NVARCHAR(255),
			@CurrentPMTime			  DATETIME,
			@HolidayTimeTypeId		  INT,
			@HolidayChargeCodeId	  INT,
			@IsW2SalaryPerson		  BIT = 0,
			@ModifiedBy				  INT

		DECLARE @SubstituteDateLog TABLE(
										PersonId INT,
										HolidayDate DATETIME,
										SubstituteDate DATETIME,
										Notes NVARCHAR(100),
										ActualHours DECIMAL(10,2),
										ApprovedBy	INT,
										IsNewRow	BIT
									)

	SELECT  @CurrentPMTime = dbo.InsertingTime(),
			@HolidayTimeTypeId = dbo.GetHolidayTimeTypeId()

	SELECT @ParentHolidayDate = pc.Date, 
		   @ParentHolidayDescription = c.HolidayDescription
	FROM dbo.PersonCalendar pc 
	INNER JOIN dbo.Calendar c ON c.Date = pc.Date
	WHERE pc.SubstituteDate = @SubstituteDayDate AND pc.PersonId = @PersonId
	
	SELECT @IsW2SalaryPerson = 1
	FROM dbo.Pay pay 
	INNER JOIN dbo.Timescale ts ON pay.Timescale = ts.TimescaleId  
	WHERE	pay.Person = @PersonId AND  ts.Name = 'W2-Salary' AND @ParentHolidayDate IS NOT NULL AND @ParentHolidayDate BETWEEN pay.StartDate AND pay.EndDate-1

	SELECT @HolidayChargeCodeId = Id FROM ChargeCode WHERE TimeTypeId = @HolidayTimeTypeId
	SELECT @ModifiedBy = PersonId FROM Person WHERE Alias = @UserLogin
   
	BEGIN TRY
	BEGIN TRAN tran_DeleteSubstituteDay

	INSERT INTO @SubstituteDateLog
	SELECT PC.PersonId,PC.Date,pc.SubstituteDate,pc.Description,pc.ActualHours,PC.ApprovedBy,0
	FROM dbo.PersonCalendar pc 
	WHERE (pc.SubstituteDate = @SubstituteDayDate AND pc.PersonId = @PersonId)

	UPDATE @SubstituteDateLog
	SET ActualHours = PC.ActualHours,
		Notes = PC.Description,
		ApprovedBy = PC.ApprovedBy
	FROM dbo.PersonCalendar PC 
	WHERE PC.Date = @SubstituteDayDate AND pc.PersonId = @PersonId

	DELETE pc
	FROM dbo.PersonCalendar pc 
	WHERE (pc.SubstituteDate = @SubstituteDayDate AND pc.PersonId = @PersonId) OR
		  (pc.Date = @SubstituteDayDate AND pc.PersonId = @PersonId)

	--Delete holiday timetype  Entry from TimeEntry table for substitute date.
	--Delete From TimeEntryHours.
	DELETE TEH
	FROM TimeEntry TE 
	JOIN TimeEntryHours TEH ON TEH.TimeEntryId = TE.TimeEntryId
	WHERE  TE.PersonId = @PersonId AND TE.ChargeCodeId = @HolidayChargeCodeId AND TE.ChargeCodeDate = @SubstituteDayDate

	--Delete From TimeEntry.
	DELETE TE
	FROM TimeEntry TE 
	WHERE  TE.PersonId = @PersonId AND TE.ChargeCodeId = @HolidayChargeCodeId AND TE.ChargeCodeDate = @SubstituteDayDate


	 IF(@IsW2SalaryPerson = 1 AND @ParentHolidayDate IS NOT NULL)
	 BEGIN

	    INSERT  INTO [dbo].[TimeEntry]
		                 (  [PersonId],
							[ChargeCodeId],
							[ChargeCodeDate],
							[Note],
							[ForecastedHours],
							[IsCorrect],
							[IsAutoGenerated]
		                 )
		VALUES(@PersonId,@HolidayChargeCodeId,@ParentHolidayDate,ISNULL(@ParentHolidayDescription, 0),0,1,1)

		INSERT INTO [dbo].[TimeEntryHours] 
								(   [TimeEntryId],
									[ActualHours],
									[CreateDate],
									[ModifiedDate],
									[ModifiedBy],
									[IsChargeable],
									[ReviewStatusId]
								)
		SELECT TE.TimeEntryId, 8,@CurrentPMTime,@CurrentPMTime,@ModifiedBy,0,2 /* Approved */
		FROM [dbo].[TimeEntry] AS TE 
		WHERE TE.PersonId = @PersonId AND TE.ChargeCodeDate = @ParentHolidayDate AND TE.ChargeCodeId = @HolidayChargeCodeId
		
	 END

	 
    --To log into activitylog as per #3168
		EXEC dbo.SessionLogUnprepare
	EXEC dbo.SessionLogPrepare @UserLogin = @UserLogin

	;WITH NEW_VALUES AS
	(
	SELECT	i.PersonId,
			CONVERT(NVARCHAR(10), i.HolidayDate, 101) AS [HolidayDate],
			CONVERT(NVARCHAR(10), i.SubstituteDate, 101) AS SubstituteDate,			
			P.LastName+', '+P.FirstName AS PersonName,
			CAST(i.ActualHours AS DECIMAL(10,2)) AS ActualHours,
			i.Notes,
			i.ApprovedBy AS ApprovedPersonId,
			Per.LastName+', '+Per.FirstName AS ApprovedBy
	FROM @SubstituteDateLog AS i
	JOIN dbo.Person P ON P.PersonId = i.PersonId 
	LEFT JOIN dbo.Person Per ON Per.PersonId = i.ApprovedBy 
	WHERE i.IsNewRow = 1
	),

	OLD_VALUES AS
	(
	SELECT	i.PersonId,
			CONVERT(NVARCHAR(10), i.HolidayDate, 101) AS [HolidayDate],
			CONVERT(NVARCHAR(10), i.SubstituteDate, 101) AS SubstituteDate,			
			P.LastName+', '+P.FirstName AS PersonName,
			CAST(i.ActualHours AS DECIMAL(10,2)) AS ActualHours,
			i.Notes,
			i.ApprovedBy AS ApprovedPersonId,
			Per.LastName+', '+Per.FirstName AS ApprovedBy
	FROM @SubstituteDateLog AS i
	JOIN dbo.Person P ON P.PersonId = i.PersonId 
	LEFT JOIN dbo.Person Per ON Per.PersonId = i.ApprovedBy 
	WHERE i.IsNewRow = 0
	)

	-- Log an activity
	INSERT INTO dbo.UserActivityLog
	            (ActivityTypeID,
	             SessionID,
	             SystemUser,
	             Workstation,
	             ApplicationName,
	             UserLogin,
	             PersonID,
	             LastName,
	             FirstName,
				 Data,
	             LogData,
	             LogDate)
	SELECT  CASE
	           WHEN d.PersonId IS NULL THEN 3
	           WHEN i.PersonId IS NULL THEN 5
	           ELSE 4
	       END as ActivityTypeID,
	       l.SessionID,
	       l.SystemUser,
	       l.Workstation,
	       l.ApplicationName,
	       l.UserLogin,
	       l.PersonID,
	       l.LastName,
	       l.FirstName,
		   Data = CONVERT(NVARCHAR(MAX),(SELECT *
					    FROM NEW_VALUES
					         FULL JOIN OLD_VALUES ON NEW_VALUES.PersonId = OLD_VALUES.PersonId 
			           WHERE NEW_VALUES.PersonId = ISNULL(i.PersonId, d.PersonId) OR OLD_VALUES.PersonId = ISNULL(i.PersonId, d.PersonId)
					  FOR XML AUTO, ROOT('SubstituteHoliday'))),
		   LogData = (SELECT 
						 NEW_VALUES.PersonId 
						,NEW_VALUES.[HolidayDate]
						,NEW_VALUES.SubstituteDate
						,NEW_VALUES.PersonName
						,NEW_VALUES.ActualHours
						,NEW_VALUES.Notes
						,NEW_VALUES.ApprovedPersonId
						,NEW_VALUES.ApprovedBy 
						,OLD_VALUES.PersonId 
						,OLD_VALUES.[HolidayDate]
						,OLD_VALUES.SubstituteDate
						,OLD_VALUES.PersonName
						,OLD_VALUES.ActualHours
						,OLD_VALUES.Notes
						,OLD_VALUES.ApprovedPersonId
						,OLD_VALUES.ApprovedBy 
					  FROM NEW_VALUES
					         FULL JOIN OLD_VALUES ON NEW_VALUES.PersonId = OLD_VALUES.PersonId
			            WHERE NEW_VALUES.PersonId = ISNULL(i.PersonId , d.PersonId ) OR OLD_VALUES.PersonId = ISNULL(i.PersonId , d.PersonId)
					FOR XML AUTO, ROOT('SubstituteHoliday'), TYPE),
					@CurrentPMTime
	  FROM NEW_VALUES AS i
	       FULL JOIN OLD_VALUES AS d ON i.PersonId = d.PersonId
	       INNER JOIN dbo.SessionLogData AS l ON l.SessionID = @@SPID

	COMMIT TRAN tran_DeleteSubstituteDay
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN tran_DeleteSubstituteDay
		
		DECLARE	 @ERROR_STATE	TINYINT
		,@ERROR_SEVERITY		TINYINT
		,@ERROR_MESSAGE		    NVARCHAR(2000)
		,@InitialTranCount		TINYINT

		SET	 @ERROR_MESSAGE		= ERROR_MESSAGE()
		SET  @ERROR_SEVERITY	= ERROR_SEVERITY()
		SET  @ERROR_STATE		= ERROR_STATE()
		RAISERROR ('%s', @ERROR_SEVERITY, @ERROR_STATE, @ERROR_MESSAGE)
	END CATCH
			EXEC dbo.SessionLogUnprepare
END

