-- =============================================
-- Author:		Nikita Goncharenko
-- Create date: 2009-12-08
-- Description:	Updates time entry record
-- =============================================
CREATE PROCEDURE [dbo].[TimeEntryUpdate]
	@TimeEntryId INT,
	@EntryDate datetime,
	@MilestoneDate datetime,
	@MilestonePersonId int,
	@ActualHours real,
	@ForecastedHours real,
	@TimeTypeId int,
	@ModifiedBy int,
	@Note varchar(1000),
	@IsChargeable BIT,
	@IsReviewed BIT = NULL,
	@IsCorrect BIT,
	@DefaultMilestoneId INT,
	@PersonId INT   
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @OldIsReviewed BIT,
			@PreviousTimeTypeId INT,
			@PreviousActualHours real,
			@PTOTimeTypeId INT,
			@HolidayTimeTypeId INT

	SELECT @PTOTimeTypeId = TimeTypeId
	FROM TimeType
	WHERE Name = 'PTO'
	
	DECLARE @CurrentPMTime DATETIME 
	SET @CurrentPMTime = dbo.InsertingTime()
	

	IF @MilestonePersonId = 0 
            EXECUTE dbo.MilestonePersonEntryCreateProgrammatically @PersonId = @PersonId, --  int
                @MilestoneId = @DefaultMilestoneId, @MilestoneDate = @PersonId, --  datetime
                @ActualHours = @ActualHours, --  real
                @DefaultMpId = @DefaultMilestoneId,
                @NewMilestonePersonId = @MilestonePersonId OUTPUT

	IF @PersonId = 0
	BEGIN
		SELECT @PersonId = MP.PersonId
		FROM TimeEntries TE
		JOIN MilestonePerson MP ON TE.MilestonePersonId = MP.MilestonePersonId AND TE.TimeEntryId = @TimeEntryId
	END

	IF EXISTS(SELECT 1 FROM dbo.MilestonePerson MP
				JOIN MilestonePersonEntry MPE
				ON MPE.MilestonePersonId = MP.MilestonePersonId AND @MilestoneDate BETWEEN MPE.StartDate AND MPE.EndDate
				WHERE MP.MilestonePersonId = @MilestonePersonId
			 )
	BEGIN
		
		SELECT @PreviousTimeTypeId = TimeTypeId 
				, @PreviousActualHours = ActualHours
				, @OldIsReviewed = [IsReviewed]-- To change TE status from declined according to #2110
		FROM TimeEntries 
		WHERE TimeEntryId = @TimeEntryId
		
		IF (@TimeTypeId <> @PTOTimeTypeId)
			OR (@PreviousTimeTypeId <> @PTOTimeTypeId
				AND  NOT EXISTS (SELECT 1 FROM TimeEntries TE
									JOIN MilestonePerson MP ON MP.MilestonePersonId = TE.MilestonePersonId AND MP.PersonId = @PersonId
									WHERE TE.MilestoneDate = @MilestoneDate 
									AND TE.TimeTypeId = @PTOTimeTypeId
							)
				)
			OR (@TimeTypeId = @PreviousTimeTypeId AND @TimeTypeId = @PTOTimeTypeId)
		BEGIN

			UPDATE [dbo].[TimeEntries]
			   SET [ModifiedDate] = @CurrentPMTime
				  ,[MilestonePersonId] = @MilestonePersonId
				  ,[ActualHours] = @ActualHours
				  ,[ForecastedHours] = @ForecastedHours
				  ,[TimeTypeId] = @TimeTypeId
				  ,[ModifiedBy] = @ModifiedBy
				  ,[Note] = CASE WHEN @TimeTypeId = @PTOTimeTypeId THEN 'PTO' ELSE @Note END
				  ,[IsChargeable] = @IsChargeable
				  ,[MilestoneDate] = @MilestoneDate
				  ,[IsReviewed] = case when @OldIsReviewed = 0 and @IsReviewed = 0 then NULL else @IsReviewed end
				  ,[IsCorrect] = @IsCorrect
				  ,[IsAutoGenerated] = 0 --It is not Autogenerated, Here, user modifying the timeEntry.
			WHERE TimeEntryId = @TimeEntryId


			
			--ENTER PTO for this person.		
		
			SELECT @HolidayTimeTypeId = TimeTypeId
			FROM TimeType
			WHERE Name = 'holiday'
		
			--Check whether entered PTO or not for other projects. If not entered then we need to proceed to keep PTO.
			IF NOT EXISTS (SELECT 1 FROM TimeEntries TE
									JOIN MilestonePerson MP ON MP.MilestonePersonId = TE.MilestonePersonId AND MP.PersonId = @PersonId
									WHERE TE.MilestoneDate = @MilestoneDate 
									AND ((TE.TimeTypeId = @PTOTimeTypeId AND MP.MilestonePersonId <> @MilestonePersonId)
										OR TE.TimeEntryId = @HolidayTimeTypeId)
								)
					AND EXISTS (SELECT 1
								FROM dbo.Calendar AS cal
								WHERE cal.Date = @MilestoneDate AND cal.DayOff = 0)
			BEGIN			

				IF @PreviousTimeTypeId <> @TimeTypeId AND @TimeTypeId = @PTOTimeTypeId
				BEGIN		
			
					IF NOT EXISTS (SELECT 1
									FROM dbo.PersonCalendar
									WHERE PersonId = @PersonId AND Date = @MilestoneDate)
					BEGIN
						INSERT INTO dbo.PersonCalendar (Date, PersonId, DayOff, ActualHours, TimeTypeId, IsFromTimeEntry)
						VALUES (@MilestoneDate, @PersonId, 1, @ActualHours, @PTOTimeTypeId, 1)
					END
					ELSE
					BEGIN
						/*
							company holiday, but person wants to work, later company holiday removed, then now if person enter PTO timeentry, we need to update Person DayOff=1.
						*/
						UPDATE PC
						SET PC.DayOff = 1,
							PC.ActualHours = @ActualHours,
							PC.TimeTypeId = @PTOTimeTypeId,
							PC.IsFromTimeEntry = 1
						FROM PersonCalendar PC
						WHERE PC.PersonId = @PersonId AND PC.Date = @MilestoneDate
					END
			
				END
				ELSE IF @PreviousTimeTypeId = @PTOTimeTypeId AND @PreviousTimeTypeId <> @TimeTypeId
				BEGIN
					--Delete PTO.
					--DELETE 
					--FROM PersonCalendar
					--WHERE PersonId = @PersonId AND Date = @MilestoneDate

					DELETE PC
					FROM TimeEntries TE
					JOIN MilestonePerson MP ON MP.MilestonePersonId = TE.MilestonePersonId AND MP.PersonId = @PersonId AND TE.MilestoneDate = @MilestoneDate
					JOIN PersonCalendar PC ON PC.PersonId = MP.PersonId AND TE.MilestoneDate = PC.Date
					WHERE NOT EXISTS (SELECT 1 FROM TimeEntries TE2
									JOIN MilestonePerson MP2 ON MP2.MilestonePersonId = TE2.MilestonePersonId AND MP2.PersonId = MP.PersonId
									WHERE TE2.MilestoneDate = TE.MilestoneDate
									AND TE2.TimeTypeId = @PTOTimeTypeId)
				END
				ELSE IF @PreviousTimeTypeId = @TimeTypeId AND @PreviousActualHours <> @ActualHours
				BEGIN
					UPDATE PC
					SET PC.ActualHours = @ActualHours,
						PC.IsFromTimeEntry = 1
					FROM PersonCalendar PC
					WHERE PC.PersonId = @PersonId AND PC.Date = @MilestoneDate
				END
			
				--Update PersonCalendarAuto table dayoff with PersonCalendar dayOff.	
				UPDATE ca
					SET DayOff = pc.DayOff
					FROM dbo.PersonCalendarAuto AS ca
						INNER JOIN dbo.v_PersonCalendar AS pc ON ca.date = pc.Date AND ca.PersonId = pc.PersonId AND pc.Date = @MilestoneDate
					WHERE ca.PersonId = @PersonId

			END

		END
		
	END
	ELSE
	BEGIN
			
		DELETE FROM [dbo].[TimeEntries]
		WHERE TimeEntryId = @TimeEntryId					

		IF NOT EXISTS (SELECT 1 FROM TimeEntries TE
									JOIN MilestonePerson MP ON MP.MilestonePersonId = TE.MilestonePersonId AND MP.PersonId = @PersonId
									WHERE TE.MilestoneDate = @MilestoneDate 
									AND TE.TimeTypeId = @PTOTimeTypeId
							)
		BEGIN
			DELETE 
			FROM PersonCalendar
			WHERE PersonId = @PersonID AND Date = @MilestoneDate

			UPDATE ca
				SET DayOff = pc.DayOff
				FROM dbo.PersonCalendarAuto AS ca
					INNER JOIN dbo.v_PersonCalendar AS pc ON ca.date = pc.Date AND ca.PersonId = pc.PersonId AND pc.Date = @MilestoneDate
				WHERE ca.PersonId = @PersonId
		END
	END	
END
