<?xml version="1.0" encoding="utf-8"?>
<WebTest Name="Opportunity" Id="e643a842-8bcd-4aae-9f7a-3d187b133a22" Owner="" Priority="0" Enabled="True" CssProjectStructure="" CssIteration="" Timeout="0" WorkItemIds="" Description="" CredentialUserName="" CredentialPassword="" PreAuthenticate="True" Proxy="" StopOnError="False" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Items>
    <Request Method="GET" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/set_user.aspx" ThinkTime="7" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <ExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="1" DisplayName="Extract Hidden Fields" Description="Extract all hidden fields from the response and place them into the test context.">
          <RuleParameters>
            <RuleParameter Name="Required" Value="True" />
            <RuleParameter Name="HtmlDecode" Value="True" />
          </RuleParameters>
        </ExtractionRule>
      </ExtractionRules>
      <CorrelationExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam28.ctl00$body$btnSetUser" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="Name" Value="ctl00_body_btnSetUser" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam29.ctl00$body$ddlUsers" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Ley" />
            <RuleParameter Name="Index" Value="79" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
      </CorrelationExtractionRules>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/set_user.aspx" ThinkTime="4" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="{{$HIDDEN1.ctl00_scriptManager_HiddenField}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="{{$HIDDEN1.__EVENTTARGET}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="{{$HIDDEN1.__EVENTARGUMENT}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="{{$HIDDEN1.__VIEWSTATE}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="{{$HIDDEN1.ctl00$hidDirtyData}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="{{$HIDDEN1.ctl00$hidDoSaveDirty}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="{{$HIDDEN1.ctl00$hidAllowContinueWithoutSave}}" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlUsers" Value="k.rMuschick@fhx.com" RecordedValue="k.rMuschick@fhx.com" CorrelationBinding="{{FormPostParam29.ctl00$body$ddlUsers}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$btnSetUser" Value="Become" RecordedValue="Become" CorrelationBinding="{{FormPostParam28.ctl00$body$btnSetUser}}" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="GET" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityList.aspx" ThinkTime="2" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <ExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="1" DisplayName="Extract Hidden Fields" Description="Extract all hidden fields from the response and place them into the test context.">
          <RuleParameters>
            <RuleParameter Name="Required" Value="True" />
            <RuleParameter Name="HtmlDecode" Value="True" />
          </RuleParameters>
        </ExtractionRule>
      </ExtractionRules>
      <CorrelationExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam10.returnTo" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;returnTo=" />
            <RuleParameter Name="EndsWith" Value="&quot;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
      </CorrelationExtractionRules>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityList.aspx" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <Headers>
        <Header Name="x-microsoftajax" Value="Delta=true" />
      </Headers>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00$scriptManager" Value="ctl00$body$pnlBody|ctl00$body$btnAddOpportunity" RecordedValue="ctl00$body$pnlBody|ctl00$body$btnAddOpportunity" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="{{$HIDDEN1.ctl00_scriptManager_HiddenField}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="ctl00$body$btnAddOpportunity" RecordedValue="ctl00$body$btnAddOpportunity" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="{{$HIDDEN1.__EVENTARGUMENT}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_TabContainer1_ClientState" Value="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__LASTFOCUS" Value="{{$HIDDEN1.__LASTFOCUS}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="{{$HIDDEN1.__VIEWSTATE}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATEENCRYPTED" Value="{{$HIDDEN1.__VIEWSTATEENCRYPTED}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="{{$HIDDEN1.ctl00$hidDirtyData}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="{{$HIDDEN1.ctl00$hidDoSaveDirty}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="{{$HIDDEN1.ctl00$hidAllowContinueWithoutSave}}" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cpe_ClientState" Value="true" RecordedValue="true" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$TabContainer1$tpMainFilters$chbActiveOnly" Value="on" RecordedValue="on" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$TabContainer1$tpMainFilters$ddlClients" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$TabContainer1$tpMainFilters$ddlSalespersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$TabContainer1$tpSearch$txtSearch" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__ASYNCPOST" Value="true" RecordedValue="true" CorrelationBinding="" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="GET" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="12" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <ExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="1" DisplayName="Extract Hidden Fields" Description="Extract all hidden fields from the response and place them into the test context.">
          <RuleParameters>
            <RuleParameter Name="Required" Value="True" />
            <RuleParameter Name="HtmlDecode" Value="True" />
          </RuleParameters>
        </ExtractionRule>
      </ExtractionRules>
      <CorrelationExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam9.returnTo" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="?returnTo=" />
            <RuleParameter Name="EndsWith" Value="&quot;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam17.ctl00$body$btnSave" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="Name" Value="ctl00_body_btnSave" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam18.ctl00$hidDirtyData" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot; /&gt;&#xD;" />
            <RuleParameter Name="Index" Value="5" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam19.ctl00$body$ddlStatus" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Act" />
            <RuleParameter Name="Index" Value="7" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam20.ctl00$body$ddlPriority" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;A&lt;/" />
            <RuleParameter Name="Index" Value="13" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam21.ctl00$body$ddlClient" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;EUR" />
            <RuleParameter Name="Index" Value="20" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam22.ctl00$body$ddlSalesperson" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Fal" />
            <RuleParameter Name="Index" Value="47" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam23.ctl00$body$dfOwner$ddlActivePersons" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Dol" />
            <RuleParameter Name="Index" Value="94" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam24.ctl00$body$ddlPractice" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;202" />
            <RuleParameter Name="Index" Value="178" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam25.ctl00$body$ddlRevenueType" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Ina" />
            <RuleParameter Name="Index" Value="9" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam26.ctl00$body$ddlProjects" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="ue&quot;:&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;,&quot;Lo" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam27.hiddenInputToUpdateATBuffer_CommonToolkitScripts" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Act" />
            <RuleParameter Name="Index" Value="7" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
      </CorrelationExtractionRules>
      <QueryStringParameters>
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="{{QueryStringParam10.returnTo}}" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/CompanyPerfomanceServ.asmx/GetProjects" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <StringHttpBody ContentType="application/json; charset=utf-8" InsertByteOrderMark="False">ewAiAGsAbgBvAHcAbgBDAGEAdABlAGcAbwByAHkAVgBhAGwAdQBlAHMAIgA6ACIAdQBuAGQAZQBmAGkAbgBlAGQAOgA1ADYAMwA7ACIALAAiAGMAYQB0AGUAZwBvAHIAeQAiADoAIgBQAHIAbwBqAGUAYwB0ACIALAAiAGMAbwBuAHQAZQB4AHQASwBlAHkAIgA6AG4AdQBsAGwAfQA=</StringHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/CompanyPerfomanceServ.asmx/GetDdlProjectGroupContents" ThinkTime="32" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <StringHttpBody ContentType="application/json; charset=utf-8" InsertByteOrderMark="False">ewAiAGsAbgBvAHcAbgBDAGEAdABlAGcAbwByAHkAVgBhAGwAdQBlAHMAIgA6ACIAdQBuAGQAZQBmAGkAbgBlAGQAOgA1ADYAMwA7ACIALAAiAGMAYQB0AGUAZwBvAHIAeQAiADoAIgBHAHIAbwB1AHAAIgAsACIAYwBvAG4AdABlAHgAdABLAGUAeQAiADoAbgB1AGwAbAB9AA==</StringHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="8" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="http://216.182.84.20:8283/PracticeManagement/OpportunityList.aspx">
      <CorrelationExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam5.id" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="?id=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="6" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam6.activeOnly" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;activeOnly=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="6" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam7.index" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;index=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="6" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam8.returnTo" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;returnTo=" />
            <RuleParameter Name="EndsWith" Value="&quot;" />
            <RuleParameter Name="Index" Value="6" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
      </CorrelationExtractionRules>
      <QueryStringParameters>
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="{{QueryStringParam9.returnTo}}" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="{{$HIDDEN1.ctl00_scriptManager_HiddenField}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="{{$HIDDEN1.__EVENTTARGET}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="{{$HIDDEN1.__EVENTARGUMENT}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_tcOpportunityDetails_ClientState" Value="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="{{$HIDDEN1.__VIEWSTATE}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="True" RecordedValue="True" CorrelationBinding="{{FormPostParam18.ctl00$hidDirtyData}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="{{$HIDDEN1.ctl00$hidDoSaveDirty}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="{{$HIDDEN1.ctl00$hidAllowContinueWithoutSave}}" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlStatus" Value="1" RecordedValue="1" CorrelationBinding="{{FormPostParam19.ctl00$body$ddlStatus}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtOpportunityName" Value="Opportunity web test" RecordedValue="Opportunity web test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPriority" Value="A" RecordedValue="A" CorrelationBinding="{{FormPostParam20.ctl00$body$ddlPriority}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClient" Value="563" RecordedValue="563" CorrelationBinding="{{FormPostParam21.ctl00$body$ddlClient}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientGroups_ClientState" Value="51:::Default Group:::" RecordedValue="51:::Default Group:::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClientGroup" Value="51" RecordedValue="51" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlSalesperson" Value="3631" RecordedValue="3631" CorrelationBinding="{{FormPostParam22.ctl00$body$ddlSalesperson}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$dfOwner$ddlActivePersons" Value="3704" RecordedValue="3704" CorrelationBinding="{{FormPostParam23.ctl00$body$dfOwner$ddlActivePersons}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtBuyerName" Value="Test" RecordedValue="Test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPractice" Value="17" RecordedValue="17" CorrelationBinding="{{FormPostParam24.ctl00$body$ddlPractice}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlRevenueType" Value="3" RecordedValue="3" CorrelationBinding="{{FormPostParam25.ctl00$body$ddlRevenueType}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlProjects" Value="-1" RecordedValue="-1" CorrelationBinding="{{FormPostParam26.ctl00$body$ddlProjects}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientProjects_ClientState" Value="::::::" RecordedValue="::::::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$txtDescription" Value="some text" RecordedValue="some text" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$btnSave" Value="Save" RecordedValue="Save" CorrelationBinding="{{FormPostParam17.ctl00$body$btnSave}}" UrlEncode="True" />
        <FormPostParameter Name="hiddenInputToUpdateATBuffer_CommonToolkitScripts" Value="1" RecordedValue="1" CorrelationBinding="{{FormPostParam27.hiddenInputToUpdateATBuffer_CommonToolkitScripts}}" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="GET" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <ExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="1" DisplayName="Extract Hidden Fields" Description="Extract all hidden fields from the response and place them into the test context.">
          <RuleParameters>
            <RuleParameter Name="Required" Value="True" />
            <RuleParameter Name="HtmlDecode" Value="True" />
          </RuleParameters>
        </ExtractionRule>
      </ExtractionRules>
      <CorrelationExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam1.id" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="?id=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam2.activeOnly" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;activeOnly=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam3.index" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;index=" />
            <RuleParameter Name="EndsWith" Value="&amp;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="QueryStringParam4.returnTo" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="&amp;amp;returnTo=" />
            <RuleParameter Name="EndsWith" Value="&quot;" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam1.ctl00$body$txtOpportunityName" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="Name" Value="ctl00_body_txtOpportunityName" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam2.ctl00$body$txtBuyerName" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="Name" Value="ctl00_body_txtBuyerName" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam3.ctl00$body$btnSave" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="Name" Value="ctl00_body_btnSave" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam4.ctl00$body$ddlStatus" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Act" />
            <RuleParameter Name="Index" Value="8" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam5.ctl00$body$ddlPriority" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;A&lt;/" />
            <RuleParameter Name="Index" Value="15" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam6.ctl00$body$ddlClient" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;EUR" />
            <RuleParameter Name="Index" Value="22" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam7.ctl00$body$ddlClientGroup" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="ey&quot;:&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;,&quot;id" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam8.ctl00$body$ddlSalesperson" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Fal" />
            <RuleParameter Name="Index" Value="49" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam9.ctl00$body$dfOwner$ddlActivePersons" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Dol" />
            <RuleParameter Name="Index" Value="96" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam10.ctl00$body$ddlPractice" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;202" />
            <RuleParameter Name="Index" Value="181" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam11.ctl00$body$ddlRevenueType" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Ina" />
            <RuleParameter Name="Index" Value="10" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam12.ctl00$body$ddlProjects" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="ue&quot;:&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;,&quot;Lo" />
            <RuleParameter Name="Index" Value="0" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam13.ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Ant" />
            <RuleParameter Name="Index" Value="219" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam14.ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Ann" />
            <RuleParameter Name="Index" Value="45" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam15.ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Won" />
            <RuleParameter Name="Index" Value="11" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="FormPostParam16.hiddenInputToUpdateATBuffer_CommonToolkitScripts" DisplayName="" Description="">
          <RuleParameters>
            <RuleParameter Name="StartsWith" Value="lue=&quot;" />
            <RuleParameter Name="EndsWith" Value="&quot;&gt;Act" />
            <RuleParameter Name="Index" Value="8" />
            <RuleParameter Name="IgnoreCase" Value="False" />
            <RuleParameter Name="UseRegularExpression" Value="False" />
            <RuleParameter Name="HtmlDecode" Value="True" />
            <RuleParameter Name="Required" Value="False" />
          </RuleParameters>
        </ExtractionRule>
      </CorrelationExtractionRules>
      <QueryStringParameters>
        <QueryStringParameter Name="id" Value="81" RecordedValue="81" CorrelationBinding="{{QueryStringParam5.id}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="activeOnly" Value="True" RecordedValue="True" CorrelationBinding="{{QueryStringParam6.activeOnly}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="clientId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="salesId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="index" Value="6" RecordedValue="6" CorrelationBinding="{{QueryStringParam7.index}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="{{QueryStringParam8.returnTo}}" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
    </Request>
    <Request Method="POST" Version="1.1" Url="https://urs.microsoft.com/urs.asmx" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <Headers>
        <Header Name="SOAPAction" Value="&quot;http://Microsoft.STS.STSWeb/RepLookup&quot;" />
      </Headers>
      <QueryStringParameters>
        <QueryStringParameter Name="MSURS-Client-Key" Value="xe4XQ8c2zaX6KHWJwsETxw%3d%3d" RecordedValue="xe4XQ8c2zaX6KHWJwsETxw%3d%3d" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="MSURS-Patented-Lock" Value="VNylNmr7DwM%3d" RecordedValue="VNylNmr7DwM%3d" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <StringHttpBody ContentType="text/xml; charset=utf-8" InsertByteOrderMark="False">PABzAG8AYQBwADoARQBuAHYAZQBsAG8AcABlACAAeABtAGwAbgBzADoAcwBvAGEAcAA9ACIAaAB0AHQAcAA6AC8ALwBzAGMAaABlAG0AYQBzAC4AeABtAGwAcwBvAGEAcAAuAG8AcgBnAC8AcwBvAGEAcAAvAGUAbgB2AGUAbABvAHAAZQAvACIAIAB4AG0AbABuAHMAOgB4AHMAaQA9ACIAaAB0AHQAcAA6AC8ALwB3AHcAdwAuAHcAMwAuAG8AcgBnAC8AMgAwADAAMQAvAFgATQBMAFMAYwBoAGUAbQBhAC0AaQBuAHMAdABhAG4AYwBlACIAIAB4AG0AbABuAHMAOgB4AHMAZAA9ACIAaAB0AHQAcAA6AC8ALwB3AHcAdwAuAHcAMwAuAG8AcgBnAC8AMgAwADAAMQAvAFgATQBMAFMAYwBoAGUAbQBhACIAIAB4AG0AbABuAHMAOgBzAG8AYQBwAGUAbgBjAD0AIgBoAHQAdABwADoALwAvAHMAYwBoAGUAbQBhAHMALgB4AG0AbABzAG8AYQBwAC4AbwByAGcALwBzAG8AYQBwAC8AZQBuAGMAbwBkAGkAbgBnAC8AIgA+ADwAcwBvAGEAcAA6AEIAbwBkAHkAPgA8AFIAZQBwAEwAbwBvAGsAdQBwACAAeABtAGwAbgBzAD0AIgBoAHQAdABwADoALwAvAE0AaQBjAHIAbwBzAG8AZgB0AC4AUwBUAFMALgBTAFQAUwBXAGUAYgAvACIAPgA8AEcAPgB7ADIAQwBFAEQAQgBGAEIAQwAtAEQAQgBBADgALQA0ADMAQQBBAC0AQgAxAEYARAAtAEMAQwA4AEUANgAzADEANgBFADMARQAyAH0APAAvAEcAPgA8AE8APgB7ADYAQwAyAEIARABBADQAQQAtADUANgBDADQALQA0ADEAMAA1AC0AOQA2ADMANAAtADMARQBFAEIANQAxAEQANAA5ADUANgAyAH0APAAvAE8APgA8AFAAPgB7ADQANQBGAEMANQBBADMAMgAtADAAMgBBAEIALQA0AEEAQwA4AC0AOAA0AEQAMQAtADkARQAyAEIANAA1ADMAQwAxADYAMABBAH0APAAvAFAAPgA8AEQAPgA4AC4AMAAuADYAMAAwADEALgA5ADwALwBEAD4APABDAD4AOAAuADAAMAAuADYAMAAwADEALgAxADgANgA2ADkAPAAvAEMAPgA8AFMAPgA2AC4AMQAuADcANgAwADAALgAwAC4AMAA8AC8AUwA+ADwASQA+ADgALgAwAC4ANwA2ADAAMAAuADEANgAzADgANQA8AC8ASQA+ADwATAA+AHUAawAtAFUAQQA8AC8ATAA+ADwAUgAgAHgAbQBsAG4AcwA6AHEAMQA9ACIAaAB0AHQAcAA6AC8ALwBNAGkAYwByAG8AcwBvAGYAdAAuAFMAVABTAC4AUwBUAFMAVwBlAGIALwAiACAAcwBvAGEAcABlAG4AYwA6AGEAcgByAGEAeQBUAHkAcABlAD0AIgBxADEAOgBSAHEAWwAxAF0AIgA+ADwAUgBxAD4APABUAD4AVQBSAEwAPAAvAFQAPgA8AFIAPgBoAHQAdABwADoALwAvADIAMQA2AC4AMQA4ADIALgA4ADQALgAyADAALwBwAHIAYQBjAHQAaQBjAGUAbQBhAG4AYQBnAGUAbQBlAG4AdAAvAG8AcABwAG8AcgB0AHUAbgBpAHQAeQBkAGUAdABhAGkAbAAuAGEAcwBwAHgAPwBpAGQAPQA4ADEAJgBhAG0AcAA7AGEAYwB0AGkAdgBlAE8AbgBsAHkAPQBUAHIAdQBlACYAYQBtAHAAOwBjAGwAaQBlAG4AdABJAGQAPQAmAGEAbQBwADsAcwBhAGwAZQBzAEkAZAA9ACYAYQBtAHAAOwBpAG4AZABlAHgAPQA2ACYAYQBtAHAAOwByAGUAdAB1AHIAbgBUAG8APQBoAHQAdABwACUAMwBhACUAMgBmACUAMgBmADIAMQA2AC4AMQA4ADIALgA4ADQALgAyADAAJQAzAGEAOAAyADgAMwAlADIAZgBQAHIAYQBjAHQAaQBjAGUATQBhAG4AYQBnAGUAbQBlAG4AdAAlADIAZgBPAHAAcABvAHIAdAB1AG4AaQB0AHkATABpAHMAdAAuAGEAcwBwAHgAPAAvAFIAPgA8AE8APgBQAFIARQA8AC8ATwA+ADwAVwA+AEYAUgBBAE0ARQA8AC8AVwA+ADwALwBSAHEAPgA8AC8AUgA+ADwALwBSAGUAcABMAG8AbwBrAHUAcAA+ADwALwBzAG8AYQBwADoAQgBvAGQAeQA+ADwALwBzAG8AYQBwADoARQBuAHYAZQBsAG8AcABlAD4A</StringHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/CompanyPerfomanceServ.asmx/GetDdlProjectGroupContents" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <StringHttpBody ContentType="application/json; charset=utf-8" InsertByteOrderMark="False">ewAiAGsAbgBvAHcAbgBDAGEAdABlAGcAbwByAHkAVgBhAGwAdQBlAHMAIgA6ACIAdQBuAGQAZQBmAGkAbgBlAGQAOgA1ADYAMwA7ACIALAAiAGMAYQB0AGUAZwBvAHIAeQAiADoAIgBHAHIAbwB1AHAAIgAsACIAYwBvAG4AdABlAHgAdABLAGUAeQAiADoAIgA1ADEAIgB9AA==</StringHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/CompanyPerfomanceServ.asmx/GetProjects" ThinkTime="8" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <StringHttpBody ContentType="application/json; charset=utf-8" InsertByteOrderMark="False">ewAiAGsAbgBvAHcAbgBDAGEAdABlAGcAbwByAHkAVgBhAGwAdQBlAHMAIgA6ACIAdQBuAGQAZQBmAGkAbgBlAGQAOgA1ADYAMwA7ACIALAAiAGMAYQB0AGUAZwBvAHIAeQAiADoAIgBQAHIAbwBqAGUAYwB0ACIALAAiAGMAbwBuAHQAZQB4AHQASwBlAHkAIgA6ACIALQAxACIAfQA=</StringHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="4" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <Headers>
        <Header Name="x-microsoftajax" Value="Delta=true" />
      </Headers>
      <QueryStringParameters>
        <QueryStringParameter Name="id" Value="81" RecordedValue="81" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="activeOnly" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="clientId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="salesId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="index" Value="6" RecordedValue="6" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00$scriptManager" Value="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$updNotes|ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$btnAddNote" RecordedValue="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$updNotes|ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$btnAddNote" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_tcOpportunityDetails_ClientState" Value="{&quot;ActiveTabIndex&quot;:1,&quot;TabState&quot;:[true,true,true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:1,&quot;TabState&quot;:[true,true,true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__LASTFOCUS" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlStatus" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtOpportunityName" Value="Opportunity web test" RecordedValue="Opportunity web test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPriority" Value="A" RecordedValue="A" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClient" Value="563" RecordedValue="563" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientGroups_ClientState" Value="51:::Default Group:::" RecordedValue="51:::Default Group:::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClientGroup" Value="51" RecordedValue="51" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlSalesperson" Value="3631" RecordedValue="3631" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$dfOwner$ddlActivePersons" Value="3704" RecordedValue="3704" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtBuyerName" Value="Test" RecordedValue="Test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPractice" Value="17" RecordedValue="17" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlRevenueType" Value="3" RecordedValue="3" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlProjects" Value="-1" RecordedValue="-1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientProjects_ClientState" Value="::::::" RecordedValue="::::::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$txtDescription" Value="some text" RecordedValue="some text" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteSendOut$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$tbNote" Value="some notes" RecordedValue="some notes" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$twNote_ClientState" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod" Value="4" RecordedValue="4" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPersonName" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlProjects" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedStartDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedEndDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="hiddenInputToUpdateATBuffer_CommonToolkitScripts" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__ASYNCPOST" Value="true" RecordedValue="true" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$btnAddNote" Value="Add Note" RecordedValue="Add Note" CorrelationBinding="" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="2" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <Headers>
        <Header Name="x-microsoftajax" Value="Delta=true" />
      </Headers>
      <QueryStringParameters>
        <QueryStringParameter Name="id" Value="81" RecordedValue="81" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="activeOnly" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="clientId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="salesId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="index" Value="6" RecordedValue="6" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00$scriptManager" Value="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$updOppTranstion|ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" RecordedValue="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$updOppTranstion|ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_tcOpportunityDetails_ClientState" Value="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlStatus" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtOpportunityName" Value="Opportunity web test" RecordedValue="Opportunity web test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPriority" Value="A" RecordedValue="A" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClient" Value="563" RecordedValue="563" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientGroups_ClientState" Value="51:::Default Group:::" RecordedValue="51:::Default Group:::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClientGroup" Value="51" RecordedValue="51" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlSalesperson" Value="3631" RecordedValue="3631" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$dfOwner$ddlActivePersons" Value="3704" RecordedValue="3704" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtBuyerName" Value="Test" RecordedValue="Test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPractice" Value="17" RecordedValue="17" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlRevenueType" Value="3" RecordedValue="3" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlProjects" Value="-1" RecordedValue="-1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientProjects_ClientState" Value="::::::" RecordedValue="::::::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$txtDescription" Value="some text" RecordedValue="some text" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" Value="3681" RecordedValue="3681" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteSendOut$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$tbNote" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$twNote_ClientState" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod" Value="4" RecordedValue="4" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPersonName" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlProjects" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedStartDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedEndDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="hiddenInputToUpdateATBuffer_CommonToolkitScripts" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" RecordedValue="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__LASTFOCUS" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__ASYNCPOST" Value="true" RecordedValue="true" CorrelationBinding="" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="2" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="">
      <Headers>
        <Header Name="x-microsoftajax" Value="Delta=true" />
      </Headers>
      <ExtractionRules>
        <ExtractionRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" VariableName="0" DisplayName="Extract Hidden Fields" Description="Extract all hidden fields from the response and place them into the test context.">
          <RuleParameters>
            <RuleParameter Name="Required" Value="True" />
            <RuleParameter Name="HtmlDecode" Value="True" />
          </RuleParameters>
        </ExtractionRule>
      </ExtractionRules>
      <QueryStringParameters>
        <QueryStringParameter Name="id" Value="81" RecordedValue="81" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="activeOnly" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="clientId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="salesId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="index" Value="6" RecordedValue="6" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00$scriptManager" Value="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$updOppTranstion|ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" RecordedValue="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$updOppTranstion|ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_tcOpportunityDetails_ClientState" Value="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="True" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlStatus" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtOpportunityName" Value="Opportunity web test" RecordedValue="Opportunity web test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPriority" Value="A" RecordedValue="A" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClient" Value="563" RecordedValue="563" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientGroups_ClientState" Value="51:::Default Group:::" RecordedValue="51:::Default Group:::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClientGroup" Value="51" RecordedValue="51" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlSalesperson" Value="3631" RecordedValue="3631" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$dfOwner$ddlActivePersons" Value="3704" RecordedValue="3704" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtBuyerName" Value="Test" RecordedValue="Test" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPractice" Value="17" RecordedValue="17" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlRevenueType" Value="3" RecordedValue="3" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlProjects" Value="-1" RecordedValue="-1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientProjects_ClientState" Value="::::::" RecordedValue="::::::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$txtDescription" Value="some text" RecordedValue="some text" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" Value="3681" RecordedValue="3681" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" Value="3665" RecordedValue="3665" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteSendOut$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$tbNote" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$twNote_ClientState" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod" Value="4" RecordedValue="4" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPersonName" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlProjects" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedStartDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedEndDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="hiddenInputToUpdateATBuffer_CommonToolkitScripts" Value="1" RecordedValue="1" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" RecordedValue="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__LASTFOCUS" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__ASYNCPOST" Value="true" RecordedValue="true" CorrelationBinding="" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
    <Request Method="POST" Version="1.1" Url="http://216.182.84.20:8283/PracticeManagement/OpportunityDetail.aspx" ThinkTime="0" Timeout="300" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="0" ExpectedResponseUrl="http://216.182.84.20:8283/PracticeManagement/OpportunityList.aspx">
      <QueryStringParameters>
        <QueryStringParameter Name="id" Value="81" RecordedValue="81" CorrelationBinding="{{QueryStringParam1.id}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="activeOnly" Value="True" RecordedValue="True" CorrelationBinding="{{QueryStringParam2.activeOnly}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="clientId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="salesId" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="index" Value="6" RecordedValue="6" CorrelationBinding="{{QueryStringParam3.index}}" UrlEncode="False" UseToGroupResults="False" />
        <QueryStringParameter Name="returnTo" Value="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" RecordedValue="http%3a%2f%2f216.182.84.20%3a8283%2fPracticeManagement%2fOpportunityList.aspx" CorrelationBinding="{{QueryStringParam4.returnTo}}" UrlEncode="False" UseToGroupResults="False" />
      </QueryStringParameters>
      <FormPostHttpBody>
        <FormPostParameter Name="ctl00_scriptManager_HiddenField" Value="{{$HIDDEN1.ctl00_scriptManager_HiddenField}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00_body_tcOpportunityDetails_ClientState" Value="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" RecordedValue="{&quot;ActiveTabIndex&quot;:0,&quot;TabState&quot;:[true,true,true]}" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDirtyData" Value="{{$HIDDEN1.ctl00$hidDirtyData}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidDoSaveDirty" Value="{{$HIDDEN1.ctl00$hidDoSaveDirty}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$hidAllowContinueWithoutSave" Value="{{$HIDDEN1.ctl00$hidAllowContinueWithoutSave}}" RecordedValue="True" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlStatus" Value="1" RecordedValue="1" CorrelationBinding="{{FormPostParam4.ctl00$body$ddlStatus}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtOpportunityName" Value="Opportunity web test" RecordedValue="Opportunity web test" CorrelationBinding="{{FormPostParam1.ctl00$body$txtOpportunityName}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPriority" Value="A" RecordedValue="A" CorrelationBinding="{{FormPostParam5.ctl00$body$ddlPriority}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClient" Value="563" RecordedValue="563" CorrelationBinding="{{FormPostParam6.ctl00$body$ddlClient}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientGroups_ClientState" Value="51:::Default Group:::" RecordedValue="51:::Default Group:::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlClientGroup" Value="51" RecordedValue="51" CorrelationBinding="{{FormPostParam7.ctl00$body$ddlClientGroup}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlSalesperson" Value="3631" RecordedValue="3631" CorrelationBinding="{{FormPostParam8.ctl00$body$ddlSalesperson}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$dfOwner$ddlActivePersons" Value="3704" RecordedValue="3704" CorrelationBinding="{{FormPostParam9.ctl00$body$dfOwner$ddlActivePersons}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$txtBuyerName" Value="Test" RecordedValue="Test" CorrelationBinding="{{FormPostParam2.ctl00$body$txtBuyerName}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlPractice" Value="17" RecordedValue="17" CorrelationBinding="{{FormPostParam10.ctl00$body$ddlPractice}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlRevenueType" Value="3" RecordedValue="3" CorrelationBinding="{{FormPostParam11.ctl00$body$ddlRevenueType}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$ddlProjects" Value="-1" RecordedValue="-1" CorrelationBinding="{{FormPostParam12.ctl00$body$ddlProjects}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$cddClientProjects_ClientState" Value="::::::" RecordedValue="::::::" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$txtDescription" Value="some text" RecordedValue="some text" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons" Value="3681" RecordedValue="3681" CorrelationBinding="{{FormPostParam13.ctl00$body$tcOpportunityDetails$tpDescription$otePipeline$ddlPersons}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons" Value="3665" RecordedValue="3665" CorrelationBinding="{{FormPostParam14.ctl00$body$tcOpportunityDetails$tpDescription$oteProposed$ddlPersons}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpDescription$oteSendOut$ddlPersons" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$tbNote" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$twNote_ClientState" Value="{{$HIDDEN1.ctl00$body$tcOpportunityDetails$tpHistory$nOpportunity$twNote_ClientState}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod" Value="4" RecordedValue="4" CorrelationBinding="{{FormPostParam15.ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPeriod}}" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlPersonName" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpHistory$activityLog$ddlProjects" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedStartDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$tcOpportunityDetails$tpTools$dpProjectedEndDate$txtDate" Value="" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="ctl00$body$btnSave" Value="Save" RecordedValue="Save" CorrelationBinding="{{FormPostParam3.ctl00$body$btnSave}}" UrlEncode="True" />
        <FormPostParameter Name="hiddenInputToUpdateATBuffer_CommonToolkitScripts" Value="1" RecordedValue="1" CorrelationBinding="{{FormPostParam16.hiddenInputToUpdateATBuffer_CommonToolkitScripts}}" UrlEncode="True" />
        <FormPostParameter Name="__EVENTTARGET" Value="{{$HIDDEN1.__EVENTTARGET}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__EVENTARGUMENT" Value="{{$HIDDEN1.__EVENTARGUMENT}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__LASTFOCUS" Value="{{$HIDDEN1.__LASTFOCUS}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
        <FormPostParameter Name="__VIEWSTATE" Value="{{$HIDDEN0.__VIEWSTATE}}" RecordedValue="" CorrelationBinding="" UrlEncode="True" />
      </FormPostHttpBody>
    </Request>
  </Items>
  <ValidationRules>
    <ValidationRule Classname="Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidateResponseUrl, Microsoft.VisualStudio.QualityTools.WebTestFramework, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" DisplayName="Response URL" Description="Validates that the response URL after redirects are followed is the same as the recorded response URL.  QueryString parameters are ignored." Level="Low" />
  </ValidationRules>
</WebTest>
